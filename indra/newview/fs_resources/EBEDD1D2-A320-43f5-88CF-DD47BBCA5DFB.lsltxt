//http bridge script v.2.4
//Firestorm
//Tozh Taurog, Arrehn Oberlander, Tonya Souther

//
// Global Variables and CONSTANTS
//
    // Shared
    integer timerMask;        // Every function that shares the timer needs a TIMER_ entry below.
    float   timerInterval;    // float, seconds. Always set this when using llSetTimerEvent
    float   timerElapsed;     // floats, seconds since last tick.
    integer TIMER_TYPE_NONE   = 0;
    integer TIMER_TYPE_TP     = 1;
    integer TIMER_TYPE_FLIGHT = 2;
        
    
    // Bridge platform
    integer FIRESTORM_VIEWER = 0;
    integer UNKNOWN_VIEWER = 1;
    integer META_CONTROL = 1024;      //control value to do nothing; for no-script sims
    string  bridgeAuth = "BRIDGEKEY"; // filled in dynamically
    string  bridgeVersion = "2.4";    //this should match fslslbridge.cpp
    string  bridgeURL;
    string  latestURL;
    integer debug = FALSE;
    integer httpStatus = 200;
    integer keyViewerHandshake;
    integer tryHandshakeOnce = TRUE;
    key owner;
    integer timerType = TIMER_TYPE_NONE;

    // Radar Tags
    integer useTags=FALSE;  
    list tagStore = [];     // strided list of (key,integer) est. 21 + (126)*100 = 12,621kb
    list tagInterestQ = []; // keys pending for lookup
    integer tagChan;        // holds our response channel
    integer tagChanH;       // tagChan listener handle
    integer tagSpamCount;   // tag lookup messages received last 60s sample 
    integer tagLastReqT;    // timestamp of last lookup request 
    string protoTag = "RTAG";
    string myTagIdx = "1";
    // The following vars could be defined for clarity, but are left out for mem savings.
    //integer MAX_STORE = 100; ;
    // Indexes may correspond to the following:  
    //["", "Firestorm", "Kokua", "Dolphin", "MiniRadar", "Catznip", "RLV", "Radegast", "TPV", "Phoenix", "Singularity", "Zen"];
    // If you add tags to the above list, also be sure to increment the range enforcement in the LISTEN section.
    // Note: the radar tag system is optional, opt-in, off by default. It can be enabled in viewer preferences.


    // Teleport
    float   TP_TARGET_DISTANCE = 1.0;// Distance to target when move to target should stop
    integer MAX_TIME_TO_TP = 10;     // (seconds) should be set to 10 for normal use
    float   TP_TIMER_TICK = 0.05;
    vector  mttVector;               // target for llMoveToTarget() teleport
    integer startTPTimer;
    
    // Flight assist
    float   MIN_SPEED = 2.0;
    float   WANT_SPEED = 20.0;
    float   MAX_SPEED = 25.0;
    float   MIN_TIME = 1.0;
    float   DEFAULT_BOOST = 0.5;
    float   FAST_TICK = 0.1;
    float   SLOW_TICK = 1.0;
    float   LONG_TIME = 5.0;         // reset boost if no work in a long time
    float   MIN_BOOST_HEIGHT = 72.0;
    float   MIN_BOOST_CLEARANCE = 36.0;
    integer useFlightAssist = FALSE;
    float   last_alt;
    float   last_time;
    float   last_move;
    float   boost;
    integer controls;
    integer flying = -1;
    integer falling = -1;
    integer hovering = -1;
    float   last_boost_height;
    float   average_boost;
    
    // OpenCollar/LockMeister AO interface
    integer aoChannelOC;
    integer aoChannelLM = -8888;
    integer aoListenerOC = -1;
    integer aoListenerLM = -1;
    key     aoCollarKey = NULL_KEY;
    
//
// Bridge platform helper functions
//
    makeSane()
    // try and resist "accidental" damage from other scripts
    // reset persistent prim attributes frequently set via scripts, try and stop other scripts
    {
        string myName = llGetScriptName();
        integer n = llGetInventoryNumber(INVENTORY_SCRIPT);
        if (n > 1)
        {
            llOwnerSay("NOTICE: One or more scripts have been added to your Firestorm bridge! If you did not expect this message, use the Firestorm 'Avatar/Avatar Health/Recreate Bridge' menu option to re-create your bridge now.");
            llSleep(1.0);
            while(n)
            {
                string s = llGetInventoryName(INVENTORY_SCRIPT,--n);
                if (s != myName)
                    llSetScriptState(s,FALSE);
            }
        }
        llParticleSystem([]);
        llSetText("",ZERO_VECTOR,0.0);
        llSetTexture("757c276e-6409-ad54-a862-ca89c04e4940",ALL_SIDES);
        llSetTextureAnim(0,ALL_SIDES,1,1,1.0,1.0,1.0);
        llAllowInventoryDrop(FALSE);
        // make bridge inconspicuous
        llSetScale(<0.01,0.01,0.01>);
        llSetPos(<0.0,0.0,-0.15>);
        llSetObjectDesc(llGetObjectName());
        llStopMoveToTarget();

    }

    initBridge()
    {
        llRequestURL();
        //debugOutput("rezzed");
        owner = llGetOwner();
        
        // Disable all secondary stateful services
        llSetTimerEvent(0);
        llStopMoveToTarget();
        flight_set_hover(FALSE);
        
        if(llGetAttached() != 0)
        {
            llRequestPermissions(llGetOwner(),PERMISSION_TAKE_CONTROLS);
        }
    
        //assume the worst and let the viewer convince us otherwise
        keyViewerHandshake = UNKNOWN_VIEWER;
        
        // if we were last flying reinitialize ourself    
        if (useFlightAssist)
        {
            //debugOutput("Flight assist true, going to flight_init");
            flight_init();
        }

        // Set the channel for the AO OC interface
        aoSetChannelOC();
        // Remove previous AO listeners if present
        if (aoListenerOC >= 0)
        {
            llListenRemove(aoListenerOC);
            aoListenerOC = -1;
            aoCollarKey = NULL_KEY;
        }
        if (aoListenerLM >= 0)
        {
            llListenRemove(aoListenerLM);
            aoListenerLM = -1;
        }
    }

    saveNewURL(string url)
    {
        latestURL = url;
    }
    
    parseCommand(key httpReqID, string msg)
    {
        //debugOutput("Parsing original input: " + msg);
        //remove the <llsd><string> ... </string></llsd> wrapper
        integer end = llStringLength(msg) - 18;        
        integer start = 14;
        //debugOutput("Parsing inner string: " + llGetSubString(msg, start, end));
        list commandList = llParseString2List(llGetSubString(msg,start,end),["|"],[]);
        //debugOutput("Parsing command list: " +  (string)commandList);
        string cmd = llList2String(commandList,0);
        
        //debugOutput("Parsing command: " + cmd);
        //Large If statement for command processing. Shame on you, LSL!
        if (cmd == "URL Confirmed")
        {
                //we're in the right viewer, go on.
                keyViewerHandshake = FIRESTORM_VIEWER;
            
        } // URL Confirmed
        
        if (cmd == "UseLSLFlightAssist")
        {
            //debugOutput("Parsing params: " + llList2String(commandList,1));
            integer newstatus = llList2Integer(commandList,1);
            if (newstatus != useFlightAssist)
            {                
               useFlightAssist = newstatus;
               if (useFlightAssist)
               {
                    //debugOutput("Flight assist true, going to flight_init");
                   flight_init();
               }
               else
               {
                   //debugOutput("Flight assist false, removing flag");
                   if (timerMask & TIMER_TYPE_FLIGHT)
                   {
                       //debugOutput("timerMask & TIMER_FLIGHT");
                       timerMask = timerMask ^ TIMER_TYPE_FLIGHT; // remove flight from event counter
                   }
               }
            }
        }
    
        else if (cmd == "llMoveToTarget")
        {
            // Get parameters
            string params = "<" + llList2String(commandList,1) + ">";
            mttVector=(vector)params;
            //debugOutput("Parsing vector: " + (string)mttVector);
            vector relpos = mttVector - llGetPos();
            float groundLevel = llGround(relpos);
            if (mttVector.z < groundLevel)  // Trying to go underground? I think not!
            {
                mttVector.z = groundLevel + 1;
            } 
            startTPTimer = llGetUnixTime();
              
              // tp commands immediately configure a TP timer consumer
              timerMask = timerMask | TIMER_TYPE_TP;
              if ((timerInterval > TP_TIMER_TICK) || (timerInterval == 0))
              {
                timerInterval = TP_TIMER_TICK;
                llSetTimerEvent(timerInterval);
              }
              
            //llHTTPResponse(httpReqID, httpStatus, "<llsd><string>test response from llMoveToTarget</string></llsd>");
        }// "llMoveToTarget"
        
        else if (cmd == "getZOffsets") 
        // Radar-specific command to get high-rez altitude data. 
        // Input is list of UUIDs to query
        // Output is list of UUID:Altitude pairs
        {
            // Get parameters
            list    tUUIDs = llCSV2List(llList2String(commandList, 1));
            commandList=[]; // free memory
            integer tLength = llGetListLength(tUUIDs);
            key     tUUID;  // key for llGetobjectDetails()
            vector  tPos;                  
            integer i = 0;
            list    responses;
            
            for (i = 0; i < tLength; ++i) 
            {
                tUUID = (key)llList2String(tUUIDs,i);
                tPos = llList2Vector(llGetObjectDetails(tUUID, ([OBJECT_POS])),0);
                if (tPos.z > 1023) // we only care about results at higher altitudes.
                    responses = (responses=[]) + responses + tUUID + tPos.z;  //LSO memhack
            }
            tUUIDs=[]; // free memory
            string body = "<llsd><string>" +llList2CSV(responses) + "</string></llsd>";
            responses=[]; // free memory
            llHTTPResponse(httpReqID, httpStatus, body);
 
        }// "getZOffsets"
 
        else if ( cmd == "getScriptInfo")
        {
            key target = (key)llList2String(commandList, 1);
            getScriptInfo(target);
        }
        else if (cmd == "getTag")
        {
            if (useTags)
            {
                key target = llList2String(commandList, 1);
                lookupTag(target);
            }
        }
        else if (cmd == "FSPublishRadarTag")
        {
            integer bool = (integer)llList2Integer(commandList, 1);  // 0 = false, else true
            enableTags(bool); 
        }

    }

    debugOutput(string msg)
    {
        if (debug)
        {
            llOwnerSay("BridgeDebug: " + msg);
        }
    }

//
//  Get Script Count
//

    getScriptInfo(key target)
    {
        list details = llGetObjectDetails(target, ([OBJECT_NAME, 
                        OBJECT_TOTAL_SCRIPT_COUNT, OBJECT_RUNNING_SCRIPT_COUNT, OBJECT_SCRIPT_MEMORY, OBJECT_SCRIPT_TIME]));
        llOwnerSay("'"+(string)llList2String(details,0) +
                   "' [" + (string)llList2Integer(details,2) + "/" + (string)llList2Integer(details,1) + "] running scripts. " +
                   (string)(llList2Integer(details,3)/1024) + "Kb consumed for " + (string)(llList2Float(details,4)*1000.0) + "ms of cpu time.");
    }   
                        
//
// Radar Tag Functions
//

enableTags(integer en)
{
    useTags=en;
    tagStore=[];
    tagInterestQ=[];
    tagSpamCount = 0;
    tagLastReqT = 0;

    llListenRemove(tagChanH);
    if (en)
    {
        tagChan = hashChannel(owner);
        // on activation, test for multiple receivers.
        llRegionSayTo(owner,hashChannel(owner),llList2CSV([protoTag,myTagIdx,0]));
        tagChanH = llListen(tagChan,"",NULL_KEY,"");
    }   
}  
    
integer hashChannel(key agent)
// algorithm from unknown author
{
    string str = (string)agent;
    integer channel = 5381;
    integer i;
    for( i = 20 ; i >= 0 ; i-- )
    {
        channel = ( ( channel << 5 ) + channel ) + llSubStringIndex( " -0123456789abcdef", llGetSubString(str, i, i) );
    }
    if( channel == DEBUG_CHANNEL || ( channel >= -100000 && channel<= 100000 ) )
    channel = channel + 123456;//Add value to it if it reaches this point.
    return channel;
}
    
integer lookupTag(key agent)
// We want to get a tag for a particular agent
{
    integer i = llListFindList(tagStore,[agent]);
    
    // if found...
    if ( i != -1)
    {
        return llList2Integer(tagStore,i+1);
    }
    
    // check and see if target is in this sim
    if (llGetAgentSize(agent) == ZERO_VECTOR)
        return 0;
    
    if (llListFindList(tagInterestQ,[agent]) != -1)
        return 0; // don't requery if we already have one pending.
    
    // If we get here, queue up a request, add to interestList
    
    // garbage collect tagAgentList if needed (should never be needed)
    integer n = llGetListLength(tagInterestQ);
    if (n > 40) 
    {
        while (n > 0)
        {
            key a = llList2Key(tagInterestQ,n-1);
            if (llGetAgentSize(a) == ZERO_VECTOR)
            {
                tagInterestQ = llDeleteSubList(tagInterestQ,n-1,n-1);
            }
            n -= 1;
        }
    } 
       
    tagInterestQ+=[agent];
    llRegionSayTo(agent,hashChannel(agent),llList2CSV([protoTag,myTagIdx,tagChan])); // protoString, Firestorm IDX
    return 0;
}  
    
reportTag(key av, integer tagIdx)
{               
    llOwnerSay("<bridgeTag av="+(string)av+" idx="+(string)tagIdx+" />");
}

//
// OpenCollar/LockMeister AO interface functions
//

    aoSetChannelOC()
    {
        aoChannelOC = (integer)("0x" + llGetSubString(owner,30,-1));
        if (aoChannelOC > 0)
        {
             aoChannelOC = -aoChannelOC;
        }
    }

    aoPingCollarOC()
    {
        llWhisper(aoChannelOC, "OpenCollar?");
    }

    aoListenOC(key collarid)
    {
        if (aoListenerOC >= 0)
        {
            llListenRemove(aoListenerOC);
        }
        aoListenerOC = llListen(aoChannelOC,"",collarid,"");
        aoCollarKey = collarid;
    }
    
    aoListenLM()
    {
        if (aoListenerLM >= 0)
        {
            llListenRemove(aoListenerLM);
        }
        aoListenerLM = llListen(aoChannelLM,"",NULL_KEY,"");
    }

    aoState(string newstate)
    {
        llOwnerSay("<clientAO state="+newstate+">");
    }
             
//
// Teleport Helper functions
//    
    
    
    tpMoveStep()
    {        
        vector loc = llGetPos();          
        vector targ = mttVector - loc;
        float dist = llVecMag(targ);
        
        //debugOutput("current: " + (string)loc + " target: " + (string)targ + " tp distance: " + (string)dist);
        
        //if we are out of time or distance - stop
        if((dist < TP_TARGET_DISTANCE) ||  (llGetUnixTime() - MAX_TIME_TO_TP > startTPTimer) || (mttVector == loc))
        {    
            llStopMoveToTarget();
            timerMask = timerMask ^ TIMER_TYPE_TP; // remove our timer if we finish
        }
        else
        {
            if (dist < 65)
            {
                //debugOutput("One jump to :" + (string)mttVector);
                llMoveToTarget(mttVector, TP_TIMER_TICK);
            }
            else
            {
                //debugOutput("Multiple jump to :" + (string)(loc+llVecNorm(targ)*60));
                llMoveToTarget(loc+llVecNorm(targ)*60, TP_TIMER_TICK);
            }
        }
        
        // If we're not close to target and time is not up yet, check again
        if (timerMask & TIMER_TYPE_TP)
        {
            timerInterval = TP_TIMER_TICK;
            llSetTimerEvent(timerInterval);
        }
    }

//
// Flight Assist Functions
//

    flight_set_hover(integer active)
    {
        //debugOutput("Flight:set_hover " + (string)active);

        if(active == hovering) return;
        hovering = active;
        if(hovering)
            llSetForce(<0,0,9.8> * llGetMass(), FALSE);
        else
            llSetForce(<0,0,0>, FALSE);
    }
             
    flight_set_tick(float tick)
    // positively intializes a spot for us in the eventTimer.
    {
        //debugOutput("Flight:set_tick " + (string)tick);
        
        timerMask = timerMask | TIMER_TYPE_FLIGHT;
        timerInterval = tick;
        if (timerMask == TIMER_TYPE_FLIGHT)
        {
            llSetTimerEvent(timerInterval);
        }
        else if ((timerInterval > tick) || (timerInterval < 0.1))
        {   
            llSetTimerEvent(timerInterval);
        }
    }
        
    flight_check_boost()
    {
        //debugOutput("Flight:check_boost ");         
        
        flying = 1;
        falling = 0;
        integer info = llGetAgentInfo(owner);
        
        // Sleep if not flying
        if((info & AGENT_FLYING) == 0)
        {
            //debugOutput("not flying");
            flight_set_hover(FALSE);
            falling = (info & AGENT_IN_AIR) != 0;
            flying = 0;
            boost = 0;
            flight_set_tick(SLOW_TICK);
            return;
        }
            
        // Sleep if we don't have controls
        if(controls <= 0)
        {
            //debugOutput("no controls");
            flight_set_tick(SLOW_TICK);
            return;
        } 
        
        // Otherwise, we may be flying = look up further details
        vector pos = llGetPos();
        if(pos.z < last_boost_height / 2) // trim running average of boost if big altitude drop
            average_boost = average_boost * (pos.z / last_boost_height)
                          + DEFAULT_BOOST * (1.0 - pos.z / last_boost_height);
        
        // Sleep if low to the ground
        if(pos.z < MIN_BOOST_HEIGHT || pos.z - llGround(<0,0,0>) < MIN_BOOST_CLEARANCE)
        {
            flight_set_hover(FALSE);
            flight_set_tick(SLOW_TICK);
            boost = 0;
            return;
        }
        
        // Otherwise hover and get even more details
        flight_set_hover(TRUE);
        vector vel = llGetVel();
        float time = llGetTime();
        float speed = vel.z;
        float target = WANT_SPEED;
        float window = WANT_SPEED / 20;
        
        if(speed > 0)
            last_move = time;
        if(time - last_time >= LONG_TIME)
            boost = 0;
        else
        {
            if(speed < target - window)
            {
                if(boost == 0)
                    boost = average_boost;
                if(time - last_move > MIN_TIME) boost += 0.4;
                else if(speed < target * 0.25) boost += 0.2;
                else if(speed < target * 0.5 ) boost += 0.1;
                else if(speed < target * 0.75) boost += 0.05;
                else if(speed < target - window * 4) boost += 0.02;
                else boost += 0.01;
            }
            else if(speed > MAX_SPEED) boost -= 0.5;
            else if(speed > target + window * 4) boost -= 0.1;
            else if(speed > target + window * 2) boost -= 0.03;
            else if(speed > target + window) boost -= 0.01;
            if(boost <= 0)
                boost = 0;
            if(boost > 0) 
            {
                llApplyImpulse(<0,0,boost> * llGetMass(), FALSE);
                average_boost = average_boost * 0.9 + boost * 0.1; // 10 sample running average
                last_boost_height = pos.z;
            }
        }
        
        // If we find we need a correction
        if(boost) 
        {
            flight_set_tick(FAST_TICK);
        }
        else 
            flight_set_tick(SLOW_TICK);
        
        last_alt = pos.z;
        last_time = time;
    }
        
    flight_take_controls()
    {
        llTakeControls(CONTROL_UP|CONTROL_DOWN,TRUE,TRUE);
    }    

    flight_request_perms()
    {
        flight_take_controls();
    }
            
    flight_init()
    {
        //debugOutput("Flight:init ");
        flight_set_hover(FALSE);
            
        // initialize flight vars
        useFlightAssist = TRUE;
        boost = 0;
        flying = -1;
        falling = -1;
        hovering = -1;
        if(llGetAttached()) 
            flight_request_perms();
        flight_set_tick(SLOW_TICK);
    }
        
//
// MAIN
//

default
{
    state_entry()
    {
        makeSane();
        initBridge();
        aoListenOC(NULL_KEY);
        aoListenLM();
        aoPingCollarOC();
        
        //<DEBUG>
        //debug=TRUE;
        //debugOutput("Free memory="+(string)llGetFreeMemory());
        //enableTags(TRUE);
        //llSetTimerEvent(10);
        //</DEBUG>
    }
    
    on_rez(integer i)
    // We don't want to be rezzed without being attached. Insure we don't create litter.
    {
        llSetPrimitiveParams([PRIM_TEMP_ON_REZ,TRUE]);
    }
    
    attach(key k)
    // Initialize bridge functionality when worn as an attachment
    {
        if (k != NULL_KEY)
        {
            tryHandshakeOnce = TRUE;
            initBridge();
            if (useTags)
                enableTags(TRUE);
            aoListenOC(NULL_KEY);
            aoPingCollarOC();
            aoListenLM();
        }
    }
    
    run_time_permissions(integer i)
    {
        if (i)
        {
            if(useFlightAssist) 
                flight_take_controls();
            else
            {
                //take control for value that does nothing, in order to work in no-script sims
                llTakeControls(META_CONTROL,TRUE,TRUE);
            }
        }
    }
        
    control(key id, integer level, integer edge)
    {
        if((llGetAgentInfo(owner) & AGENT_FLYING) && useFlightAssist)
        {
            controls = 0;
            if(level & CONTROL_UP) controls++;
            if(level & CONTROL_DOWN) controls--;
            if (controls > 0)
                flight_check_boost();
        }
    }
        
    changed(integer change)
    {
        if (change & CHANGED_REGION) 
        {
            llRequestURL();
        }
        if (change & CHANGED_TELEPORT)
        {
            tagStore=[];
            tagInterestQ=[];
            tagSpamCount = 0;
            tagLastReqT = 0;
        }
        if (change & CHANGED_INVENTORY)
        {
            makeSane();
        }
    }
    
    timer()
    {
        //debugOutput("tick. mask = "+(string)timerMask);
        // Multiple functions may have to share the timer
        // Do not assume you know the timer interval in advance.
        // Each consumer will have to check whether the interval that has passed
        // since last tick is long enough to trigger functionality.
        
        // every tick, stop ourself. Consumers are responsible for restarting the timer
        // each time they get a tick, if they still need it
        llSetTimerEvent(0);
        timerInterval = 0;
        timerElapsed = llGetAndResetTime();
        
        // All consumers should have an entry here, and must manage their interval.
        // Consumers should reset the timer only of they need it faster, otherwise
        // leave it as it is.  Order this list by fastest timer consumers first. 
        if (timerMask & TIMER_TYPE_TP)
        {
            tpMoveStep();
            return; // teleports shortcut other timers
        }
    
        if (timerMask & TIMER_TYPE_FLIGHT)
        {
            flight_check_boost();
        }
          
        //<DEBUG>  
        //debugOutput("memUsage= "+(string)llGetFreeMemory());   
        //llSetTimerEvent(10);
        //</DEBUG>
    }
    
    http_request(key ID, string Method, string Body) 
    {
        //httpReqID = ID;
        //debugOutput("Received HTTP " + Method + " message. Command body: " + Body);
        
       if (Method == URL_REQUEST_GRANTED) 
        {
            saveNewURL(Body);

            //debugOutput ("keyViewerHandshake " + (string)keyViewerHandshake + " tryHandshakeOnce " + (string)tryHandshakeOnce);
            //Saying URL to owner
           if (keyViewerHandshake == FIRESTORM_VIEWER || tryHandshakeOnce == 1)
            {
                //debugOutput ("Firestorm viewer and handshake");
                llOwnerSay("<bridgeURL>" + latestURL+ "</bridgeURL><bridgeAuth>"+bridgeAuth+"</bridgeAuth><bridgeVer>"+bridgeVersion+"</bridgeVer>");
                tryHandshakeOnce = 0;
            }
            else
            {
                //we're in a wrong viewer. just sit quietly
                llDetachFromAvatar();
            }
        }
        else if (Method == URL_REQUEST_DENIED) 
        {
            saveNewURL("");

            //debugOutput("No URLs free !");
            //keep trying?
            llRequestURL();
        }
        else if (Method == "GET") 
        {
            parseCommand(ID, Body);
            llHTTPResponse(ID, httpStatus, "<llsd><string> command=\"GET\" text=\"get - Hello Bridge!</string></llsd>");
        }
        else if (Method == "PUT")
        {
            llHTTPResponse(ID, httpStatus, "<llsd><string>PUT - Hello Bridge!</string></llsd>");
        }
        else if (Method == "POST")
        {
            parseCommand(ID, Body);
            llHTTPResponse(ID, httpStatus, "<llsd><string>POST - Hello Bridge!</string></llsd>");
        }
    }
        
    listen(integer fromChan, string senderName, key senderID, string msg)
    {
        //debugOutput("DEBUG from "+senderName+" msg: "+msg);
        
        if (fromChan == tagChan) // ie, tag channel logic
        {
            // Our av of interest is the owner of the senderID
            // Sanity: insure the av is in our sim
            key av = llGetOwnerKey(senderID);
            if (llGetAgentSize(av) == ZERO_VECTOR)
            {
               return;
            }
        
            // Some input tracking to deal with spam
            integer curResponseT = llGetUnixTime();
            if (curResponseT - tagLastReqT > 60) // 60s sample serial
            {
                tagLastReqT = curResponseT;
                tagSpamCount = 0;
            }
            tagSpamCount++;
        
            // Sanity: insure our msg is CSV arguemnts in the correct format protoTag,tagIdx,responseChannel
            list args = llCSV2List(msg);
            if (llGetListLength(args) != 3)
                return;       
        
            // Sanity: arg 0 is protoTag
            if (llList2String(args,0) != protoTag)
                return;
                
            integer chan = llList2Integer(args,2);
    
            // Sanity: insure that the tagIdx we received is in our range
            integer tagIdx = llList2Integer(args,1);
            //if (tagIdx < 1 || tagIdx >= llGetListLength(tagStrings))
            if (tagIdx < 1 || tagIdx >= 10) // hardcoded for memsavings
            {
                return;
            }
                
            // Sanity: antispam, if we're being flooded with requests, only respond to new avs
            if (tagSpamCount > 60)
            {
    
                // If we already know this av, send a response
                integer i = llListFindList(tagStore,[av]);
                if (i != -1)
                    return; 
            }
                
            // Sanity: Insure the av is not ourselves (from other, radar tag handling attachments)
            if (llGetOwnerKey(senderID) == owner)
            {
                //disabled, pending a timer and flush mechanism to deal with typical "two bridge" scenarios during bridge creation.
                //llOwnerSay("Duplicate radar tag processing attachments detected ("+llKey2Name(senderID)+"). You may wish to wish to remove one of your attachments that processes radar tags.");
            }
                                    
            //Message/Args are valid if we get here, return response
            if (chan != 0)
                llRegionSayTo(av,chan,llList2CSV([protoTag,myTagIdx,0]));  // zero channel = no response please.
             
               
            //See if we're getting a response we have pending
            integer i = llListFindList(tagInterestQ,[av]);
            if (i != -1)
            {
                //Render Data to the viewer and/or minilist
                tagInterestQ = llDeleteSubList(tagInterestQ,i,i);
                reportTag(av,tagIdx);
    
                //Garbage collect the tagStore list if get over 100 entries.
                integer n = llGetListLength(tagStore) / 2;
                if (n > 99)
                {
                    while (n > 0)
                    {
                        key a = llList2Key(tagStore,(n-1)*2);
                        if (llGetAgentSize(a) == ZERO_VECTOR)
                        {
                            tagStore = llDeleteSubList(tagStore,(n-1)*2,(n-1)*2+1);
                        }
                        n -= 1;
                    }
                }
                                
                tagStore += [av,tagIdx];
            }            
        } // end tagChan listen handler

        else if (fromChan == aoChannelOC)     // OpenCollar AO interface
        {
            integer zhaoPos;
            if ((aoCollarKey == NULL_KEY) &&    // no collar paired yet
                (msg == "OpenCollar=Yes"))      // a collar is saying hello
            {
                aoListenOC(senderID);     // pair with it
            }
            else if (msg == "OpenCollar=No")    // collar signing off
            {
                aoListenOC(NULL_KEY);     // unpair with it
            }
            else if ((zhaoPos = llSubStringIndex(msg,"ZHAO_")) >= 0)
            {
                zhaoPos += 5;               // skip past prefix
                if ((llGetSubString(msg,zhaoPos,zhaoPos+4) == "AOOFF") ||
                    (llGetSubString(msg,zhaoPos,zhaoPos+7) == "STANDOFF"))
                {
                    aoState("off");
                }
                else if ((llGetSubString(msg,zhaoPos,zhaoPos+3) == "AOON") ||
                    (llGetSubString(msg,zhaoPos,zhaoPos+6) == "STANDON"))
                {
                    aoState("on");
                }
            }
        } // end OpenCollar AO interface listen handler
        
        else if (fromChan == aoChannelLM)        // LockMeister AO interface
        {
            key lmtarget = (key)llGetSubString(msg, 0, 35);
            list templist = llParseStringKeepNulls(llGetSubString(msg, 36, -1),
                                                    [ "|" ], []);
            string command = llList2String(templist, 0);
            if(lmtarget == owner)
            {
                if(command == "booton")
                {
                    aoState("on");
                }
                else if(command == "bootoff")
                {
                    aoState("off");
                }
            }
        } // end LockMeister AO interface listen handler
    } // end listen
    
}









//
//Flight assist code 
//
//Copyright (c) 2005, Argent Stonecutter & player
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//    * Redistributions in modifiable form must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in non-modifiable form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of Argent Stonecutter nor his player may be used to endorse or promote products derived from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// END //
