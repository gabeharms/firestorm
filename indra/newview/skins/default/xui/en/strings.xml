<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<!-- This file contains strings that used to be hardcoded in the source.
     It is only for those strings which do not belong in a floater.
     For example, the strings used in avatar chat bubbles, and strings 
     that are returned from one component and may appear in many places-->
<strings>

	<!-- Default Args - these arguments will be replaced in all strings -->
	<string name="SECOND_LIFE">Second Life</string>
	<string name="APP_NAME">Second Life</string>
	<string name="SECOND_LIFE_GRID">Second Life Grid</string>
	<string name="SUPPORT_SITE">Second Life Support Portal</string>

	<!-- starting up -->
	<string name="StartupDetectingHardware">Detecting hardware...</string>
	<string name="StartupLoading">Loading</string>
	<string name="Fullbright">Fullbright (Legacy)</string>	
	<string name="CacheWaiting">(Loading...)</string>
	<string name="CacheNobody">(nobody)</string>
	<string name="CacheNone">(none)</string>	
	<!-- Login -->
	<string name="LoginInProgress">Logging in. [APP_NAME] may appear frozen.  Please wait.</string>
	<string name="LoginInProgressNoFrozen">Logging in...</string>
	<string name="LoginAuthenticating">Authenticating</string>
	<string name="LoginMaintenance">Performing account maintenance...</string>
	<string name="LoginAttempt">Previous login attempt failed. Logging in, attempt [NUMBER]</string>
	<string name="LoginPrecaching">Loading world...</string>
	<string name="LoginInitializingBrowser">Initializing embedded web browser...</string>
  <string name="LoginInitializingMultimedia">Initializing multimedia...</string>
  <string name="LoginInitializingFonts">Loading fonts...</string>
  <string name="LoginVerifyingCache">Verifying cache files (can take 60-90 seconds)...</string>
	<string name="LoginProcessingResponse">Processing Response...</string>
	<string name="LoginInitializingWorld">Initializing World...</string>
	<string name="LoginDecodingImages">Decoding images...</string>
	<string name="LoginInitializingQuicktime">Initializing QuickTime...</string>
	<string name="LoginQuicktimeNotFound">QuickTime not found - unable to initialize.</string>
	<string name="LoginQuicktimeOK">QuickTime initialized successfully.</string>
	<string name="LoginWaitingForRegionHandshake">Waiting for region handshake...</string>
	<string name="LoginConnectingToRegion">Connecting to region...</string>
	<string name="LoginDownloadingClothing">Downloading clothing...</string>
	<string name="LoginFailedNoNetwork">Network Error: Could not establish connection, please check your network connection.</string>
	<string name="Quit">Quit</string>
	<string name="create_account_url">http://secondlife.com/registration/</string>

	<!-- Disconnection -->
	<string name="AgentLostConnection">This region may be experiencing trouble.  Please check your connection to the Internet.</string>
	
	
	<!-- Tooltip, lltooltipview.cpp -->
	<string name="TooltipPerson">Person</string><!-- Object under mouse pointer is an avatar -->
	<string name="TooltipNoName">(no name)</string> <!-- No name on an object -->
	<string name="TooltipOwner">Owner:</string> <!-- Owner name follows -->
	<string name="TooltipPublic">Public</string> <!-- Public permissions on an object -->
	<string name="TooltipIsGroup">(Group)</string> <!-- The name before this text is that of a group -->
	<string name="TooltipFlagScript">Script</string>
	<string name="TooltipFlagPhysics">Physics</string>
	<string name="TooltipFlagTouch">Touch</string>
	<string name="TooltipFlagL$">L$</string>
	<string name="TooltipFlagDropInventory">Drop Inventory</string>
	<string name="TooltipFlagPhantom">Phantom</string>
	<string name="TooltipFlagTemporary">Temporary</string>
	<string name="TooltipFlagRightClickMenu">(Right-click for menu)</string>
	<string name="TooltipFreeToCopy">Free to copy</string>
	<string name="TooltipForSaleL$">For Sale: L$[AMOUNT]</string> <!-- L$ version -->
	<string name="TooltipForSaleMsg">For Sale: [MESSAGE]</string> <!-- Message (RetrievingData) -->
	<string name="TooltipFlagGroupBuild">Group Build</string>
	<string name="TooltipFlagNoBuild">No Build</string>
	<string name="TooltipFlagNoEdit">Group Build</string>
	<string name="TooltipFlagNotSafe">Not Safe</string><!-- damage area -->
	<string name="TooltipFlagNoFly">No Fly</string>
	<string name="TooltipFlagGroupScripts">Group Scripts</string>
	<string name="TooltipFlagNoScripts">No Scripts</string>
	<string name="TooltipLand">Land:</string>
	<string name="TooltipMustSingleDrop">Only a single item can be dragged here</string>	
	<string name="TooltipAltLeft">Alt-Left arrow for previous tab</string>	
	<string name="TooltipAltRight">Alt-Right arrow for next tab</string>	

	<!-- tooltips for Urls -->
	<string name="TooltipHttpUrl">Click to view this web page</string>
	<string name="TooltipSLURL">Click to view this location's information</string>
	<string name="TooltipAgentUrl">Click to view this resident's profile</string>
	<string name="TooltipGroupUrl">Click to view this group's description</string>
	<string name="TooltipEventUrl">Click to view this event's description</string>
	<string name="TooltipClassifiedUrl">Click to view this classified</string>
	<string name="TooltipParcelUrl">Click to view this parcel's description</string>
	<string name="TooltipTeleportUrl">Click to teleport to this location</string>
	<string name="TooltipObjectIMUrl">Click to view this object's description</string>
	<string name="TooltipSLAPP">Click to run the secondlife:// command</string>
	
	<!-- ButtonToolTips, llfloater.cpp -->
	<string name="BUTTON_CLOSE_DARWIN">Close (&#8984;-W)</string>
	<string name="BUTTON_CLOSE_WIN">Close (Ctrl-W)</string>
	<string name="BUTTON_RESTORE">Restore</string>			
	<string name="BUTTON_MINIMIZE">Minimize</string>
	<string name="BUTTON_TEAR_OFF">Tear Off</string>
	<string name="BUTTON_EDIT">Edit</string>
	<string name="BUTTON_DOCK">Dock</string>
	<string name="BUTTON_UNDOCK">Undock</string>
	<string name="BUTTON_HELP">Show Help</string>

	<!-- searching - generic -->
	<string name="Searching">Searching...</string>
	<string name="NoneFound">None found.</string>

	<!-- Indicates that an avatar name or other similar datum is being retrieved. General usage. -->
	<string name="RetrievingData">Retrieving...</string>

	<string name="ReleaseNotes">Release Notes</string>
	<string name="RELEASE_NOTES_BASE_URL">http://secondlife.com/app/releasenotes/</string>

	<!-- Indicates something is being loaded. Maybe should be merged with RetrievingData -->
	<string name="LoadingData">Loading...</string>
	
	
	<!-- namecache -->
	<!-- Avatar name: text shown for LLUUID::null -->
	<string name="AvatarNameNobody">(nobody)</string>
	
	<!-- Avatar name: text shown while fetching name -->
	<string name="AvatarNameWaiting">(waiting)</string>

	<!-- Avatar name: text shown as an alternative to AvatarNameFetching, easter egg. -->
	<string name="AvatarNameHippos">(hippos)</string>
	
	<!-- Group name: text shown for LLUUID::null -->
	<string name="GroupNameNone">(none)</string>
	
	<!-- Asset errors. Used in llassetstorage.cpp, translation from error code to error message. -->
	<string name="AssetErrorNone">No error</string>
	<string name="AssetErrorRequestFailed">Asset request: failed</string>
	<string name="AssetErrorNonexistentFile">Asset request: non-existent file</string>
	<string name="AssetErrorNotInDatabase">Asset request: asset not found in database</string>
	<string name="AssetErrorEOF">End of file</string>
	<string name="AssetErrorCannotOpenFile">Cannot open file</string>
	<string name="AssetErrorFileNotFound">File not found</string>
	<string name="AssetErrorTCPTimeout">File transfer timeout</string>
	<string name="AssetErrorCircuitGone">Circuit gone</string>
	<string name="AssetErrorPriceMismatch">Viewer and server do not agree on price</string>
	<string name="AssetErrorUnknownStatus">Unknown status</string>
	
	<!-- Asset Type Human Names -->
	<string name="texture">texture</string>
	<string name="sound">sound</string>
	<string name="calling card">calling card</string>
	<string name="landmark">landmark</string>
	<string name="legacy script">legacy script</string>
	<string name="clothing">clothing</string>
	<string name="object">object</string>
	<string name="note card">note card</string>
	<string name="folder">folder</string>
	<string name="root">root</string>
	<string name="lsl2 script">lsl2 script</string>
	<string name="lsl bytecode">lsl bytecode</string>
	<string name="tga texture">tga texture</string>
	<string name="body part">body part</string>												
	<string name="snapshot">snapshot</string>															
	<string name="lost and found">lost and found</string>																												
	<string name="targa image">targa image</string>															
	<string name="trash">trash</string>															
	<string name="jpeg image">jpeg image</string>															
	<string name="animation">animation</string>															
	<string name="gesture">gesture</string>															
	<string name="simstate">simstate</string>																
	<string name="favorite">favorite</string>															
	<string name="symbolic link">link</string>															
	
	<!-- llvoavatar. Displayed in the avatar chat bubble -->
	<string name="AvatarEditingAppearance">(Editing Appearance)</string>
	<string name="AvatarAway">Away</string>
	<string name="AvatarBusy">Busy</string>
	<string name="AvatarMuted">Blocked</string>

	<!-- animations -->
	<string name="anim_express_afraid">Afraid</string>
	<string name="anim_express_anger">Angry</string>
	<string name="anim_away">Away</string>
	<string name="anim_backflip">Backflip</string>
	<string name="anim_express_laugh">Belly Laugh</string>
	<string name="anim_express_toothsmile">BigSmile</string>
	<string name="anim_blowkiss">Blow Kiss</string>
	<string name="anim_express_bored">Bored</string>
	<string name="anim_bow">Bow</string>
	<string name="anim_clap">Clap</string>
	<string name="anim_courtbow">Court Bow</string>
	<string name="anim_express_cry">Cry</string>
	<string name="anim_dance1">Dance 1</string>
	<string name="anim_dance2">Dance 2</string>
	<string name="anim_dance3">Dance 3</string>
	<string name="anim_dance4">Dance 4</string>
	<string name="anim_dance5">Dance 5</string>
	<string name="anim_dance6">Dance 6</string>
	<string name="anim_dance7">Dance 7</string>
	<string name="anim_dance8">Dance 8</string>
	<string name="anim_express_disdain">Disdain</string>
	<string name="anim_drink">Drink</string>
	<string name="anim_express_embarrased">Embarrassed</string>
	<string name="anim_angry_fingerwag">Finger Wag</string>
	<string name="anim_fist_pump">Fist Pump</string>
	<string name="anim_yoga_float">Floating Yoga</string>
	<string name="anim_express_frown">Frown</string>
	<string name="anim_impatient">Impatient</string>
	<string name="anim_jumpforjoy">Jump For Joy</string>
	<string name="anim_kissmybutt">Kiss My Butt</string>
	<string name="anim_express_kiss">Kiss</string>
	<string name="anim_laugh_short">Laugh</string>
	<string name="anim_musclebeach">Muscle Beach</string>
	<string name="anim_no_unhappy">No (Unhappy)</string>
	<string name="anim_no_head">No</string>
	<string name="anim_nyanya">Nya-nya-nya</string>
	<string name="anim_punch_onetwo">One-Two Punch</string>
	<string name="anim_express_open_mouth">Open Mouth</string>
	<string name="anim_peace">Peace</string>
	<string name="anim_point_you">Point at Other</string>
	<string name="anim_point_me">Point at Self</string>
	<string name="anim_punch_l">Punch Left</string>
	<string name="anim_punch_r">Punch Right</string>
	<string name="anim_rps_countdown">RPS count</string>
	<string name="anim_rps_paper">RPS paper</string>
	<string name="anim_rps_rock">RPS rock</string>
	<string name="anim_rps_scissors">RPS scissors</string>
	<string name="anim_express_repulsed">Repulsed</string>
	<string name="anim_kick_roundhouse_r">Roundhouse Kick</string>
	<string name="anim_express_sad">Sad</string>
	<string name="anim_salute">Salute</string>
	<string name="anim_shout">Shout</string>
	<string name="anim_express_shrug">Shrug</string>
	<string name="anim_express_smile">Smile</string>
	<string name="anim_smoke_idle">Smoke Idle</string>
	<string name="anim_smoke_inhale">Smoke Inhale</string>
	<string name="anim_smoke_throw_down">Smoke Throw Down</string>
	<string name="anim_express_surprise">Surprise</string>
	<string name="anim_sword_strike_r">Sword Strike</string>
	<string name="anim_angry_tantrum">Tantrum</string>
	<string name="anim_express_tongue_out">TongueOut</string>
	<string name="anim_hello">Wave</string>
	<string name="anim_whisper">Whisper</string>
	<string name="anim_whistle">Whistle</string>
	<string name="anim_express_wink">Wink</string>
	<string name="anim_wink_hollywood">Wink (Hollywood)</string>
	<string name="anim_express_worry">Worry</string>
	<string name="anim_yes_happy">Yes (Happy)</string>
	<string name="anim_yes_head">Yes</string>
	
	<string name="texture_loading">Loading...</string>
	<string name="worldmap_offline">Offline</string>
	
	<!-- animations uploading status codes -->
	<string name="Ok">OK</string>
	<string name="Premature end of file">Premature end of file</string>
	<string name="ST_NO_JOINT">Can't find ROOT or JOINT.</string>
	
	<!-- Chat -->
	<string name="whisper">whispers:</string>
	<string name="shout">shouts:</string>
	<string name="ringing">Connecting to in-world Voice Chat...</string>
	<string name="connected">Connected</string>
	<string name="unavailable">Voice not available at your current location</string>
	<string name="hang_up">Disconnected from in-world Voice Chat</string>
	<string name="ScriptQuestionCautionChatGranted">'[OBJECTNAME]', an object owned by '[OWNERNAME]', located in [REGIONNAME] at [REGIONPOS], has been granted permission to: [PERMISSIONS].</string>
	<string name="ScriptQuestionCautionChatDenied">'[OBJECTNAME]', an object owned by '[OWNERNAME]', located in [REGIONNAME] at [REGIONPOS], has been denied permission to: [PERMISSIONS].</string>
	<string name="ScriptTakeMoney">Take Linden dollars (L$) from you</string>
	<string name="ActOnControlInputs">Act on your control inputs</string>
	<string name="RemapControlInputs">Remap your control inputs</string>
	<string name="AnimateYourAvatar">Animate your avatar</string>
	<string name="AttachToYourAvatar">Attach to your avatar</string>
	<string name="ReleaseOwnership">Release ownership and become public</string>
	<string name="LinkAndDelink">Link and delink from other objects</string>
	<string name="AddAndRemoveJoints">Add and remove joints with other objects</string>
	<string name="ChangePermissions">Change its permissions</string>
	<string name="TrackYourCamera">Track your camera</string>
	<string name="ControlYourCamera">Control your camera</string>

	<!-- IM -->
	<string name="IM_logging_string">-- Instant message logging enabled --</string>
	<string name="Unnamed">(Unnamed)</string>
	
	<!-- Sim Access labels -->
	<string name="SIM_ACCESS_PG">PG</string>
	<string name="SIM_ACCESS_MATURE">Mature</string>
	<string name="SIM_ACCESS_ADULT">Adult</string>
	<string name="SIM_ACCESS_DOWN">Offline</string>
	<string name="SIM_ACCESS_MIN">Unknown</string>
	
	<!-- For use when we do not have land type back from the server -->
	<string name="land_type_unknown">(unknown)</string>

	<!-- File load/save dialogs -->
	<string name="all_files">All Files</string>
	<string name="sound_files">Sounds</string>
	<string name="animation_files">Animations</string>
	<string name="image_files">Images</string>
	<string name="save_file_verb">Save</string>
	<string name="load_file_verb">Load</string>
	<string name="targa_image_files">Targa Images</string>
	<string name="bitmap_image_files">Bitmap Images</string>
	<string name="avi_movie_file">AVI Movie File</string>
	<string name="xaf_animation_file">XAF Anim File</string>
	<string name="xml_file">XML File</string>
	<string name="dot_raw_file">RAW File</string>
	<string name="compressed_image_files">Compressed Images</string>
	<string name="load_files">Load Files</string>
	<string name="choose_the_directory">Choose Directory</string>
	
	<!-- LSL Usage Hover Tips -->
	<string name="LSLTipSleepTime">
Sleeps script for [SLEEP_TIME] seconds.
	</string>
	
	<string name="LSLTipText_llSin">
float llSin(float theta)
theta in radians
	</string>
	<string name="LSLTipText_llCos">
float llCos(float theta)
theta in radians
	</string>
	<string name="LSLTipText_llTan">
float llTan(float theta)
theta radians
	</string>
	<string name="LSLTipText_llAtan2">
float llAtan2(float y, float x)
	</string>
	<string name="LSLTipText_llSqrt">
float llSqrt(float val)
returns 0 and triggers a Math Error for imaginary results
	</string>
	<string name="LSLTipText_llPow">
float llPow(float base, float exponent)
returns 0 and triggers Math Error for imaginary results
	</string>
	<string name="LSLTipText_llAbs">
integer llAbs(integer val)
	</string>
	<string name="LSLTipText_llFabs">
float llFabs(float val)
	</string>
	<string name="LSLTipText_llFrand">
float llFrand(float mag)
returns random number in range [0,mag)
	</string>
	<string name="LSLTipText_llFloor">
integer llFloor(float val)
returns largest integer value &lt;= val
	</string>
	<string name="LSLTipText_llCeil">
integer llCeil(float val)
returns smallest integer value &gt;= val
	</string>
	<string name="LSLTipText_llRound">
integer llRound(float val)
returns val rounded to the nearest integer
	</string>
	<string name="LSLTipText_llVecMag">
float llVecMag(vector v)
returns the magnitude of v
	</string>
	<string name="LSLTipText_llVecNorm">
vector llVecNorm(vector v)
returns the v normalized
	</string>
	<string name="LSLTipText_llVecDist">
float llVecDist(vector v1, vector v2)
returns the 3D distance between v1 and v2
	</string>
	<string name="LSLTipText_llRot2Euler">
vector llRot2Euler(rotation q)
returns the Euler representation (roll, pitch, yaw) of q
	</string>
	<string name="LSLTipText_llEuler2Rot">
rotation llEuler2Rot(vector v)
returns the rotation representation of Euler Angles v
	</string>
	<string name="LSLTipText_llAxes2Rot">
rotation llAxes2Rot(vector fwd, vector left, vector up)
returns the rotation defined by the coordinate axes
	</string>
	<string name="LSLTipText_llRot2Fwd">
vector llRot2Fwd(rotation q)
returns the forward vector defined by q
	</string>
	<string name="LSLTipText_llRot2Left">
vector llRot2Left(rotation q)
returns the left vector defined by q
	</string>
	<string name="LSLTipText_llRot2Up">
vector llRot2Up(rotation q)
returns the up vector defined by q
	</string>
	<string name="LSLTipText_llRotBetween">
rotation llRotBetween(vector v1, vector v2)
returns the rotation to rotate v1 to v2
	</string>
	<string name="LSLTipText_llWhisper">
llWhisper(integer channel, string msg)
whispers msg on channel
	</string>
	<string name="LSLTipText_llSay">
llSay(integer channel, string msg)
says msg on channel
	</string>
	<string name="LSLTipText_llShout">
llShout(integer channel, string msg)
shouts msg on channel
	</string>
	<string name="LSLTipText_llListen">
integer llListen(integer channel, string name, key id, string msg)
sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen
	</string>
	<string name="LSLTipText_llListenControl">
llListenControl(integer number, integer active)
makes a listen event callback active or inactive
	</string>
	<string name="LSLTipText_llListenRemove">
llListenRemove(integer number)
removes listen event callback number
	</string>
	<string name="LSLTipText_llSensor">
llSensor(string name, key id, integer type, float range, float arc)
Performs a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)
	</string>
	<string name="LSLTipText_llSensorRepeat">
llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)
sets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds
	</string>
	<string name="LSLTipText_llSensorRemove">
llSensorRemove()
removes sensor
	</string>
	<string name="LSLTipText_llDetectedName">
string llDetectedName(integer number)
returns the name of detected object number (returns empty string if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedKey">
key llDetectedKey(integer number)
returns the key of detected object number (returns empty key if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedOwner">
key llDetectedOwner(integer number)
returns the key of detected object&apos;s owner (returns empty key if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedType">
integer llDetectedType(integer number)
returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedPos">
vector llDetectedPos(integer number)
returns the position of detected object number (returns &lt;0,0,0&gt; if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedVel">
vector llDetectedVel(integer number)
returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedGrab">
vector llDetectedGrab(integer number)
returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedRot">
rotation llDetectedRot(integer number)
returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not valid sensed object)
	</string>
	<string name="LSLTipText_llDetectedGroup">
integer llDetectedGroup(integer number)
Returns TRUE if detected object is part of same group as owner
	</string>
	<string name="LSLTipText_llDetectedLinkNumber">
integer llDetectedLinkNumber(integer number)
returns the link position of the triggered event for touches and collisions only
	</string>
	<string name="LSLTipText_llDie">
llDie()
deletes the object
	</string>
	<string name="LSLTipText_llGround">
float llGround(vector v)
returns the ground height below the object position + v
	</string>
	<string name="LSLTipText_llCloud">
float llCloud(vector v)
returns the cloud density at the object position + v
	</string>
	<string name="LSLTipText_llWind">
vector llWind(vector v)
returns the wind velocity at the object position + v
	</string>
	<string name="LSLTipText_llSetStatus">
llSetStatus(integer status, integer value)
sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value
	</string>
	<string name="LSLTipText_llGetStatus">
integer llGetStatus(integer status)
gets value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)
	</string>
	<string name="LSLTipText_llSetScale">
llSetScale(vector scale)
sets the scale
	</string>
	<string name="LSLTipText_llGetScale">
vector llGetScale()
gets the scale
	</string>
	<string name="LSLTipText_llSetColor">
llSetColor(vector color, integer face)
sets the color
	</string>
	<string name="LSLTipText_llGetAlpha">
float llGetAlpha(integer face)
gets the alpha
	</string>
	<string name="LSLTipText_llSetAlpha">
llSetAlpha(float alpha, integer face)
sets the alpha
	</string>
	<string name="LSLTipText_llGetColor">
vector llGetColor(integer face)
gets the color
	</string>
	<string name="LSLTipText_llSetTexture">
llSetTexture(string texture, integer face)
sets the texture of face
	</string>
	<string name="LSLTipText_llScaleTexture">
llScaleTexture(float scales, float scalet, integer face)
sets the texture s, t scales for the chosen face
	</string>
	<string name="LSLTipText_llOffsetTexture">
llOffsetTexture(float offsets, float offsett, integer face)
sets the texture s, t offsets for the chosen face
	</string>
	<string name="LSLTipText_llRotateTexture">
llRotateTexture(float rotation, integer face)
sets the texture rotation for the chosen face
	</string>
	<string name="LSLTipText_llGetTexture">
string llGetTexture(integer face)
gets the texture of face (if it&apos;s a texture in the object inventory, otherwise the key in a string)
	</string>
	<string name="LSLTipText_llSetPos">
llSetPos(vector pos)
sets the position (if the script isn&apos;t physical)
	</string>
	<string name="LSLTipText_llGetPos">
vector llGetPos()
gets the position (if the script isn&apos;t physical)
	</string>
	<string name="LSLTipText_llGetLocalPos">
vector llGetLocalPos()
gets the position relative to the root (if the script isn&apos;t physical)
	</string>
	<string name="LSLTipText_llSetRot">
llSetRot(rotation rot)
sets the rotation (if the script isn&apos;t physical)
	</string>
	<string name="LSLTipText_llGetRot">
rotation llGetRot()
gets the rotation (if the script isn&apos;t physical)
	</string>
	<string name="LSLTipText_llGetLocalRot">
rotation llGetLocalRot()
gets the rotation local to the root (if the script isn&apos;t physical)
	</string>
	<string name="LSLTipText_llSetForce">
llSetForce(vector force, integer local)
sets force on object, in local coords if local == TRUE (if the script is physical)
	</string>
	<string name="LSLTipText_llGetForce">
vector llGetForce()
gets the force (if the script is physical)
	</string>
	<string name="LSLTipText_llTarget">
integer llTarget(vector position, float range)
set positions within range of position as a target and return an ID for the target
	</string>
	<string name="LSLTipText_llTargetRemove">
llTargetRemove(integer number)
removes target number
	</string>
	<string name="LSLTipText_llRotTarget">
integer llRotTarget(rotation rot, float error)
set rotations with error of rot as a rotational target and return an ID for the rotational target
	</string>
	<string name="LSLTipText_llRotTargetRemove">
llRotTargetRemove(integer number)
removes rotational target number
	</string>
	<string name="LSLTipText_llMoveToTarget">
llMoveToTarget(vector target, float tau)
critically damp to target in tau seconds (if the script is physical)
	</string>
	<string name="LSLTipText_llStopMoveToTarget">
llStopMoveToTarget()
Stops critically damped motion
	</string>
	<string name="LSLTipText_llApplyImpulse">
llApplyImpulse(vector force, integer local)
applies impulse to object, in local coords if local == TRUE (if the script is physical)
	</string>
	<string name="LSLTipText_llApplyRotationalImpulse">
llApplyRotationalImpulse(vector force, integer local)
applies rotational impulse to object, in local coords if local == TRUE (if the script is physical)
	</string>
	<string name="LSLTipText_llSetTorque">
llSetTorque(vector torque, integer local)
sets the torque of object, in local coords if local == TRUE (if the script is physical)
	</string>
	<string name="LSLTipText_llGetTorque">
vector llGetTorque()
gets the torque (if the script is physical)
	</string>
	<string name="LSLTipText_llSetForceAndTorque">
llSetForceAndTorque(vector force, vector torque, integer local)
sets the force and torque of object, in local coords if local == TRUE (if the script is physical)
	</string>
	<string name="LSLTipText_llGetVel">
vector llGetVel()
gets the velocity
	</string>
	<string name="LSLTipText_llGetAccel">
vector llGetAccel()
gets the acceleration
	</string>
	<string name="LSLTipText_llGetOmega">
vector llGetOmega()
gets the omega
	</string>
	<string name="LSLTipText_llGetTimeOfDay">
float llGetTimeOfDay()
gets the time in seconds since [SECOND_LIFE] server midnight (or since server up-time; whichever is smaller)
	</string>
	<string name="LSLTipText_llGetWallclock">
float llGetWallclock()
gets the time in seconds since midnight
	</string>
	<string name="LSLTipText_llGetTime">
float llGetTime()
gets the time in seconds since creation
	</string>
	<string name="LSLTipText_llResetTime">
llResetTime()
sets the time to zero
	</string>
	<string name="LSLTipText_llGetAndResetTime">
float llGetAndResetTime()
gets the time in seconds since creation and sets the time to zero
	</string>
	<string name="LSLTipText_llSound">
llSound(string sound, float volume, integer queue, integer loop)
plays sound at volume and whether it should loop or not
	</string>
	<string name="LSLTipText_llPlaySound">
llPlaySound(string sound, float volume)
plays attached sound once at volume (0.0 - 1.0)
	</string>
	<string name="LSLTipText_llLoopSound">
llLoopSound(string sound, float volume)
plays attached sound looping indefinitely at volume (0.0 - 1.0)
	</string>
	<string name="LSLTipText_llLoopSoundMaster">
llLoopSoundMaster(string sound, float volume)
plays attached sound looping at volume (0.0 - 1.0), declares it a sync master
	</string>
	<string name="LSLTipText_llLoopSoundSlave">
llLoopSoundSlave(string sound, float volume)
plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master
	</string>
	<string name="LSLTipText_llPlaySoundSlave">
llPlaySoundSlave(string sound, float volume)
plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master
	</string>
	<string name="LSLTipText_llTriggerSound">
llTriggerSound(string sound, float volume)
plays sound at volume (0.0 - 1.0), centered at but not attached to object
	</string>
	<string name="LSLTipText_llStopSound">
llStopSound()
Stops currently attached sound
	</string>
	<string name="LSLTipText_llPreloadSound">
llPreloadSound(string sound)
preloads a sound on viewers within range
	</string>
	<string name="LSLTipText_llGetSubString">
string llGetSubString(string src, integer start, integer end)
returns the indicated substring
	</string>
	<string name="LSLTipText_llDeleteSubString">
string llDeleteSubString(string src, integer start, integer end)
removes the indicated substring and returns the result
	</string>
	<string name="LSLTipText_llInsertString">
string llInsertString(string dst, integer position, string src)
inserts src into dst at position and returns the result
	</string>
	<string name="LSLTipText_llToUpper">
string llToUpper(string src)
convert src to all upper case and returns the result
	</string>
	<string name="LSLTipText_llToLower">
string llToLower(string src)
convert src to all lower case and returns the result
	</string>
	<string name="LSLTipText_llGiveMoney">
llGiveMoney(key destination, integer amount)
transfer amount of money from script owner to destination
	</string>
	<string name="LSLTipText_llMakeExplosion">
llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Make a round explosion of particles
	</string>
	<string name="LSLTipText_llMakeFountain">
llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)
Make a fountain of particles
	</string>
	<string name="LSLTipText_llMakeSmoke">
llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Make smoke like particles
	</string>
	<string name="LSLTipText_llMakeFire">
llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Make fire like particles
	</string>
	<string name="LSLTipText_llRezObject">
llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)
Instanciate owners inventory object at pos with velocity vel and rotation rot with start parameter param
	</string>
	<string name="LSLTipText_llLookAt">
llLookAt(vector target, F32 strength, F32 damping)
Cause object name to point it&apos;s forward axis towards target
	</string>
	<string name="LSLTipText_llStopLookAt">
llStopLookAt()
Stop causing object name to point at a target
	</string>
	<string name="LSLTipText_llSetTimerEvent">
llSetTimerEvent(float sec)
Cause the timer event to be triggered every sec seconds
	</string>
	<string name="LSLTipText_llSleep">
llSleep(float sec)
Put script to sleep for sec seconds
	</string>
	<string name="LSLTipText_llGetMass">
float llGetMass()
Get the mass of task name that script is attached to
	</string>
	<string name="LSLTipText_llCollisionFilter">
llCollisionFilter(string name, key id, integer accept)
if accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id
	</string>
	<string name="LSLTipText_llTakeControls">
llTakeControls(integer controls, integer accept, integer pass_on)
Take controls from agent task has permissions for.  If (accept == (controls &amp; input)), send input to task.  If pass_on send to agent also.
	</string>
	<string name="LSLTipText_llReleaseControls">
llReleaseControls()
Stop taking inputs
	</string>
	<string name="LSLTipText_llAttachToAvatar">
llAttachToAvatar(integer attachment)
Attach to avatar task has permissions for at point attachment
	</string>
	<string name="LSLTipText_llDetachFromAvatar">
llDetachFromAvatar()
Drop off of avatar
	</string>
	<string name="LSLTipText_llTakeCamera">
llTakeCamera(key avatar)
Move avatar&apos;s viewpoint to task
	</string>
	<string name="LSLTipText_llReleaseCamera">
llReleaseCamera(key avatar)
Return camera to agent
	</string>
	<string name="LSLTipText_llGetOwner">
key llGetOwner()
Returns the owner of the task
	</string>
	<string name="LSLTipText_llInstantMessage">
llInstantMessage(key user, string message)
IMs message to the user
	</string>
	<string name="LSLTipText_llEmail">
llEmail(string address, string subject, string message)
Sends email to address with subject and message
	</string>
	<string name="LSLTipText_llGetNextEmail">
llGetNextEmail(string address, string subject)
Get the next waiting email with appropriate address and/or subject (if blank they are ignored)
	</string>
	<string name="LSLTipText_llGetKey">
key llGetKey()
Get the key for the task the script is attached to
	</string>
	<string name="LSLTipText_llSetBuoyancy">
llSetBuoyancy(float buoyancy)
Set the tasks buoyancy (0 is none, &lt; 1.0 sinks, 1.0 floats, > 1.0 rises)
	</string>
	<string name="LSLTipText_llSetHoverHeight">
llSetHoverHeight(float height, integer water, float tau)
Critically damps to a height (either above ground level or above the higher of land and water if water == TRUE)
	</string>
	<string name="LSLTipText_llStopHover">
llStopHover()
Stop hovering to a height
	</string>
	<string name="LSLTipText_llMinEventDelay">
llMinEventDelay(float delay)
Set the minimum time between events being handled
	</string>
	<string name="LSLTipText_llSoundPreload">
llSoundPreload(string sound)
preloads a sound on viewers within range
	</string>
	<string name="LSLTipText_llRotLookAt">
llRotLookAt(rotation target, F32 strength, F32 damping)
Cause object name to point it&apos;s forward axis towards target
	</string>
	<string name="LSLTipText_llStringLength">
integer llStringLength(string str)
Returns the length of string
	</string>
	<string name="LSLTipText_llStartAnimation">
llStartAnimation(string anim)
Start animation anim for agent that owns object
	</string>
	<string name="LSLTipText_llStopAnimation">
llStopAnimation(string anim)
Stop animation anim for agent that owns object
	</string>
	<string name="LSLTipText_llPointAt">
llPointAt(vector pos)
Make agent that owns object point at pos
	</string>
	<string name="LSLTipText_llStopPointAt">
llStopPointAt()
Stop agent that owns object pointing
	</string>
	<string name="LSLTipText_llTargetOmega">
llTargetOmega(vector axis, float spinrate, float gain)
Attempt to spin at spinrate with strength gain
	</string>
	<string name="LSLTipText_llGetStartParameter">
integer llGetStartParameter()
Get's the start paramter passed to llRezObject
	</string>
	<string name="LSLTipText_llGodLikeRezObject">
llGodLikeRezObject(key inventory, vector pos)
rez directly off of a UUID if owner has dog-bit set
	</string>
	<string name="LSLTipText_llRequestPermissions">
llRequestPermissions(key agent, integer perm)
ask agent to allow the script to do perm (NB: Debit, ownership, link, joint, and permission requests can only go to the task's owner)
	</string>
	<string name="LSLTipText_llGetPermissionsKey">
key llGetPermissionsKey()
Return agent that permissions are enabled for.  NULL_KEY if not enabled
	</string>
	<string name="LSLTipText_llGetPermissions">
integer llGetPermissions()
return what permissions have been enabled
	</string>
	<string name="LSLTipText_llGetLinkNumber">
integer llGetLinkNumber()
Returns what number in a link set the script is attached to (0 means no link, 1 the root, 2 for first child, etc)
	</string>
	<string name="LSLTipText_llSetLinkColor">
llSetLinkColor(integer linknumber, vector color, integer face)
If a task exists in the link chain at linknumber, set face to color
	</string>
	<string name="LSLTipText_llCreateLink">
llCreateLink(key target, integer parent)
Attempt to link task script is attached to and target (requires permission PERMISSION_CHANGE_LINKS be set). If parent == TRUE, task script is attached to is the root
	</string>
	<string name="LSLTipText_llBreakLink">
llBreakLink(integer linknum)
Delinks the task with the given link number (requires permission PERMISSION_CHANGE_LINKS be set)
	</string>
	<string name="LSLTipText_llBreakAllLinks">
llBreakAllLinks()
Delinks all tasks in the link set (requires permission PERMISSION_CHANGE_LINKS be set)
	</string>
	<string name="LSLTipText_llGetLinkKey">
key llGetLinkKey(integer linknum)
Get the key of linknumber in link set
	</string>
	<string name="LSLTipText_llGetLinkName">
string llGetLinkName(integer linknum)
Get the name of linknumber in link set
	</string>
	<string name="LSLTipText_llGetInventoryNumber">
integer llGetInventoryNumber(integer type)
Get the number of items of a given type in the task's inventory.
Valid types: INVENTORY_TEXTURE, INVENTORY_SOUND, INVENTORY_OBJECT, INVENTORY_SCRIPT, INVENTORY_CLOTHING, INVENTORY_BODYPART, INVENTORY_NOTECARD, INVENTORY_LANDMARK, INVENTORY_ALL
	</string>
	<string name="LSLTipText_llGetInventoryName">
string llGetInventoryName(integer type, integer number)
Get the name of the inventory item number of type
	</string>
	<string name="LSLTipText_llSetScriptState">
llSetScriptState(string name, integer run)
Control the state of a script name.
	</string>
	<string name="LSLTipText_llGetEnergy">
float llGetEnergy()
Returns how much energy is in the object as a percentage of maximum
	</string>
	<string name="LSLTipText_llGiveInventory">
llGiveInventory(key destination, string inventory)
Give inventory to destination
	</string>
	<string name="LSLTipText_llRemoveInventory">
llRemoveInventory(string inventory)
Remove the named inventory item
	</string>
	<string name="LSLTipText_llSetText">
llSetText(string text, vector color, float alpha)
Set text floating over object
	</string>
	<string name="LSLTipText_llWater">
float llWater(vector v)
returns the water height below the object position + v
	</string>
	<string name="LSLTipText_llPassTouches">
llPassTouches(integer pass)
if pass == TRUE, touches are passed from children on to parents (default is FALSE)
	</string>
	<string name="LSLTipText_llRequestAgentData">
key llRequestAgentData(key id, integer data)
Requests data about agent id.  When data is available the dataserver event will be raised
	</string>
	<string name="LSLTipText_llRequestInventoryData">
key llRequestInventoryData(string name)
Requests data from object's inventory object.  When data is available the dataserver event will be raised
	</string>
	<string name="LSLTipText_llSetDamage">
llSetDamage(float damage)
Sets the amount of damage that will be done to an object that this task hits.  Task will be killed.
	</string>
	<string name="LSLTipText_llTeleportAgentHome">
llTeleportAgentHome(key id)
Teleports agent on owner's land to agent's home location
	</string>
	<string name="LSLTipText_llModifyLand">
llModifyLand(integer action, integer size)
Modify land with action (LAND_LEVEL, LAND_RAISE, LAND_LOWER, LAND_SMOOTH, LAND_NOISE, LAND_REVERT)
on size (LAND_SMALL_BRUSH, LAND_MEDIUM_BRUSH, LAND_LARGE_BRUSH)
	</string>
	<string name="LSLTipText_llCollisionSound">
llCollisionSound(string impact_sound, float impact_volume)
Suppress default collision sounds, replace default impact sounds with impact_sound (empty string to just suppress)
	</string>
	<string name="LSLTipText_llCollisionSprite">
llCollisionSprite(string impact_sprite)
Suppress default collision sprites, replace default impact sprite with impact_sprite (empty string to just suppress)
	</string>
	<string name="LSLTipText_llGetAnimation">
string llGetAnimation(key id)
Get the currently playing locomotion animation for avatar id
	</string>
	<string name="LSLTipText_llResetScript">
llResetScript()
Resets the script
	</string>
	<string name="LSLTipText_llMessageLinked">
llMessageLinked(integer linknum, integer num, string str, key id)
Sends num, str, and id to members of the link set
(LINK_ROOT sends to root task in a linked set,
LINK_SET sends to all tasks,
LINK_ALL_OTHERS to all other tasks,
LINK_ALL_CHILDREN to all children,
LINK_THIS to the task the script it is in)
	</string>
	<string name="LSLTipText_llPushObject">
llPushObject(key id, vector impulse, vector ang_impulse, integer local)
Applies impulse and ang_impulse to object id
	</string>
	<string name="LSLTipText_llPassCollisions">
llPassCollisions(integer pass)
if pass == TRUE, collisions are passed from children on to parents (default is FALSE)
	</string>
	<string name="LSLTipText_llGetScriptName">
llGetScriptName()
Returns the script name
	</string>
	<string name="LSLTipText_llGetNumberOfSides">
integer llGetNumberOfSides()
Returns the number of sides
	</string>
	<string name="LSLTipText_llAxisAngle2Rot">
rotation llAxisAngle2Rot(vector axis, float angle)
Returns the rotation generated angle about axis
	</string>
	<string name="LSLTipText_llRot2Axis">
vector llRot2Axis(rotation rot)
Returns the rotation axis represented by rot
	</string>
	<string name="LSLTipText_llRot2Angle">
float llRot2Angle(rotation rot)
Returns the rotation angle represented by rot
	</string>
	<string name="LSLTipText_llAcos">
float llAcos(float val)
Returns the arccosine in radians of val
	</string>
	<string name="LSLTipText_llAsin">
float llAsin(float val)
Returns the arcsine in radians of val
	</string>
	<string name="LSLTipText_llAngleBetween">
float llAngleBetween(rotation a, rotation b)
Returns angle between rotation a and b
	</string>
	<string name="LSLTipText_llGetInventoryKey">
key llGetInventoryKey(string name)
Returns the key of the inventory name
	</string>
	<string name="LSLTipText_llAllowInventoryDrop">
llAllowInventoryDrop(integer add)
If add == TRUE, users without permissions can still drop inventory items onto task
	</string>
	<string name="LSLTipText_llGetSunDirection">
vector llGetSunDirection()
Returns the sun direction on the simulator
	</string>
	<string name="LSLTipText_llGetTextureOffset">
vector llGetTextureOffset(integer side)
Returns the texture offset of side in the x and y components of a vector
	</string>
	<string name="LSLTipText_llGetTextureScale">
vector llGetTextureScale(integer side)
Returns the texture scale of side in the x and y components of a vector
	</string>
	<string name="LSLTipText_llGetTextureRot">
float llGetTextureRot(integer side)
Returns the texture rotation of side
	</string>
	<string name="LSLTipText_llSubStringIndex">
integer llSubStringIndex(string source, string pattern)
Finds index in source where pattern first appears (returns -1 if not found)
	</string>
	<string name="LSLTipText_llGetOwnerKey">
key llGetOwnerKey(key id)
Find the owner of id
	</string>
	<string name="LSLTipText_llGetCenterOfMass">
vector llGetCenterOfMass()
Get the object's center of mass
	</string>
	<string name="LSLTipText_llListSort">
list llListSort(list src, integer stride, integer ascending)
Sort the list into blocks of stride in ascending order if ascending == TRUE.  Note that sort only works between same types.
	</string>
	<string name="LSLTipText_llGetListLength">
integer llGetListLength(list src)
Get the number of elements in the list
	</string>
	<string name="LSLTipText_llList2Integer">
integer llList2Integer(list src, integer index)
Copy the integer at index in the list
	</string>
	<string name="LSLTipText_llList2Float">
float llList2Float(list src, integer index)
Copy the float at index in the list
	</string>
	<string name="LSLTipText_llList2String">
string llList2String(list src, integer index)
Copy the string at index in the list
	</string>
	<string name="LSLTipText_llList2Key">
key llList2Key(list src, integer index)
Copy the key at index in the list
	</string>
	<string name="LSLTipText_llList2Vector">
vector llList2Vector(list src, integer index)
Copy the vector at index in the list
	</string>
	<string name="LSLTipText_llList2Rot">
rotation llList2Rot(list src, integer index)
Copy the rotation at index in the list
	</string>
	<string name="LSLTipText_llList2List">
list llList2List(list src, integer start, integer end)
Copy the slice of the list from start to end
	</string>
	<string name="LSLTipText_llDeleteSubList">
list llDeleteSubList(list src, integer start, integer end)
Remove the slice from the list and return the remainder
	</string>
	<string name="LSLTipText_llGetListEntryType">
integer llGetListEntryType(list src, integer index)
Returns the type of the index entry in the list
(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)
	</string>
	<string name="LSLTipText_llList2CSV">
string llList2CSV(list src)
Create a string of comma separated values from list
	</string>
	<string name="LSLTipText_llCSV2List">
list llCSV2List(string src)
Create a list from a string of comma separated values
	</string>
	<string name="LSLTipText_llListRandomize">
list llListRandomize(list src, integer stride)
Returns a randomized list of blocks of size stride
	</string>
	<string name="LSLTipText_llList2ListStrided">
list llList2ListStrided(list src, integer start, integer end, integer stride)
Copy the strided slice of the list from start to end
	</string>
	<string name="LSLTipText_llGetRegionCorner">
vector llGetRegionCorner()
Returns a vector with the south west corner x,y position of the region the object is in
	</string>
	<string name="LSLTipText_llListInsertList">
list llListInsertList(list dest, list src, integer start)
Inserts src into dest at position start
	</string>
	<string name="LSLTipText_llListFindList">
integer llListFindList(list src, list test)
Returns the start of the first instance of test in src, -1 if not found
	</string>
	<string name="LSLTipText_llGetObjectName">
string llGetObjectName()
Returns the name of the object script is attached to
	</string>
	<string name="LSLTipText_llSetObjectName">
llSetObjectName(string name)
Sets the objects name
	</string>
	<string name="LSLTipText_llGetDate">
string llGetDate()
Gets the date as YYYY-MM-DD
	</string>
	<string name="LSLTipText_llEdgeOfWorld">
integer llEdgeOfWorld(vector pos, vector dir)
Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring simulator)
	</string>
	<string name="LSLTipText_llGetAgentInfo">
integer llGetAgentInfo(key id)
Gets information about agent ID.
Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING, AGENT_IN_AIR and/or AGENT_AUTOPILOT.
	</string>
	<string name="LSLTipText_llAdjustSoundVolume">
llAdjustSoundVolume(float volume)
adjusts volume of attached sound (0.0 - 1.0)
	</string>
	<string name="LSLTipText_llSetSoundQueueing">
llSetSoundQueueing(integer queue)
determines whether attached sound calls wait for the current sound to finish (0 = no [default], nonzero = yes)
	</string>
	<string name="LSLTipText_llSetSoundRadius">
llSetSoundRadius(float radius)
establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)
	</string>
	<string name="LSLTipText_llKey2Name">
string llKey2Name(key id)
Returns the name of the object key, iff the object is in the current simulator, otherwise the empty string
	</string>
	<string name="LSLTipText_llSetTextureAnim">
llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Animate the texture on the specified face/faces
	</string>
	<string name="LSLTipText_llTriggerSoundLimited">
llTriggerSoundLimited(string sound, float volume, vector tne, vector bsw)
plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to AABB defined by vectors top-north-east and bottom-south-west
	</string>
	<string name="LSLTipText_llEjectFromLand">
llEjectFromLand(key pest)
Ejects pest from land that you own
	</string>
	<string name="LSLTipText_llParseString2List">
list llParseString2List(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each)
	</string>
	<string name="LSLTipText_llOverMyLand">
integer llOverMyLand(key id)
Returns TRUE if id is over land owner of object owns, FALSE otherwise
	</string>
	<string name="LSLTipText_llGetLandOwnerAt">
key llGetLandOwnerAt(vector pos)
Returns the key of the land owner, NULL_KEY if public
	</string>
	<string name="LSLTipText_llGetNotecardLine">
key llGetNotecardLine(string name, integer line)
Returns line line of notecard name via the dataserver event
	</string>
	<string name="LSLTipText_llGetAgentSize">
vector llGetAgentSize(key id)
If the agent is in the same sim as the object, returns the size of the avatar
	</string>
	<string name="LSLTipText_llSameGroup">
integer llSameGroup(key id)
Returns TRUE if ID is in the same sim and has the same active group, otherwise FALSE
	</string>
	<string name="LSLTipText_llUnSit">
key llUnSit(key id)
If agent identified by id is sitting on the object the script is attached to or is over land owned by the objects owner, the agent is forced to stand up
	</string>
	<string name="LSLTipText_llGroundSlope">
vector llGroundSlope(vector v)
returns the ground slope below the object position + v
	</string>
	<string name="LSLTipText_llGroundNormal">
vector llGroundNormal(vector v)
returns the ground normal below the object position + v
	</string>
	<string name="LSLTipText_llGroundContour">
vector llGroundCountour(vector v)
returns the ground contour below the object position + v
	</string>
	<string name="LSLTipText_llGetAttached">
integer llGetAttached()
returns the object attachment point or 0 if not attached
	</string>
	<string name="LSLTipText_llGetFreeMemory">
integer llGetFreeMemory()
returns the available heap space for the current script
	</string>
	<string name="LSLTipText_llGetRegionName">
string llGetRegionName()
returns the current region name
	</string>
	<string name="LSLTipText_llGetRegionTimeDilation">
float llGetRegionTimeDilation()
returns the current time dilation as a float between 0 and 1
	</string>
	<string name="LSLTipText_llGetRegionFPS">
float llGetRegionFPS()
returns the mean region frames per second
	</string>
	<string name="LSLTipText_llParticleSystem">
llParticleSystem(list rules)
Creates a particle system based on rules.  Empty list removes particle system from object.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
	</string>
	<string name="LSLTipText_llGroundRepel">
llGroundRepel(float height, integer water, float tau)
Critically damps to height if within height*0.5 of level (either above ground level or above the higher of land and water if water == TRUE)
	</string>
	<string name="LSLTipText_llGiveInventoryList">
llGiveInventoryList(key destination, string category, list inventory)
Give inventory to destination in a new category
	</string>
	<string name="LSLTipText_llSetVehicleType">
llSetVehicleType(integer type)
sets vehicle to one of the default types
	</string>
	<string name="LSLTipText_llSetVehicleFloatParam">
llSetVehicleFloatParam(integer param, float value)
sets the specified vehicle float parameter
	</string>
	<string name="LSLTipText_llSetVehicleVectorParam">
llSetVehicleVectorParam(integer param, vector vec)
sets the specified vehicle vector parameter
	</string>
	<string name="LSLTipText_llSetVehicleRotationParam">
llSetVehicleVectorParam(integer param, rotation rot)
sets the specified vehicle rotation parameter
	</string>
	<string name="LSLTipText_llSetVehicleFlags">
llSetVehicleFlags(integer flags)
sets the enabled bits in 'flags'
	</string>
	<string name="LSLTipText_llRemoveVehicleFlags">
llRemoveVehicleFlags(integer flags)
removes the enabled bits in 'flags'
	</string>
	<string name="LSLTipText_llSitTarget">
llSitTarget(vector offset, rotation rot)
Set the sit location for this object (if offset == &lt;0,0,0&gt; clear it)
	</string>
	<string name="LSLTipText_llAvatarOnSitTarget">
key llAvatarOnSitTarget()
If an avatar is sitting on the sit target, return the avatar's key, NULL_KEY otherwise
	</string>
	<string name="LSLTipText_llAddToLandPassList">
llAddToLandPassList(key avatar, float hours)
Add avatar to the land pass list for hours
	</string>
	<string name="LSLTipText_llSetTouchText">
llSetTouchText(string text)
Displays text in pie menu that acts as a touch
	</string>
	<string name="LSLTipText_llSetSitText">
llSetSitText(string text)
Displays text rather than sit in pie menu
	</string>
	<string name="LSLTipText_llSetCameraEyeOffset">
llSetCameraEyeOffset(vector offset)
Sets the camera eye offset used in this object if an avatar sits on it
	</string>
	<string name="LSLTipText_llSetCameraAtOffset">
llSetCameraAtOffset(vector offset)
Sets the camera at offset used in this object if an avatar sits on it
	</string>
	<string name="LSLTipText_llDumpList2String">
string llDumpList2String(list src, string separator)
Write the list out in a single string using separator between values
	</string>
	<string name="LSLTipText_llScriptDanger">
integer llScriptDanger(vector pos)
Returns true if pos is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts
	</string>
	<string name="LSLTipText_llDialog">
llDialog(key avatar, string message, list buttons, integer chat_channel
Shows a dialog box on the avatar's screen with the message.
Up to 12 strings in the list form buttons.
If a button is clicked, the name is chatted on chat_channel.
	</string>
	<string name="LSLTipText_llVolumeDetect">
llVolumeDetect(integer detect)
If detect = TRUE, object becomes phantom but triggers collision_start and collision_end events when other objects start and stop interpenetrating.
Must be applied to the root object.
	</string>
	<string name="LSLTipText_llResetOtherScript">
llResetOtherScript(string name)
Resets script name
	</string>
	<string name="LSLTipText_llGetScriptState">
integer llGetScriptState(string name)
Resets TRUE if script name is running
	</string>
	<string name="LSLTipText_llRemoteLoadScript">
Deprecated.  Please use llRemoteLoadScriptPin instead.
	</string>
	<string name="LSLTipText_llSetRemoteScriptAccessPin">
llSetRemoteScriptAccessPin(integer pin)
If pin is set to a non-zero number, the task will accept remote script loads via llRemoteLoadScriptPin if it passes in the correct pin.
Othersise, llRemoteLoadScriptPin is ignored.
	</string>
	<string name="LSLTipText_llRemoteLoadScriptPin">
llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)
If the owner of the object this script is attached can modify target, 
they are in the same region, and the matching pin is used,
copy script name onto target,
if running == TRUE, start the script with param.
	</string>
	<string name="LSLTipText_llOpenRemoteDataChannel">
llOpenRemoteDataChannel()
Creates a channel to listen for XML-RPC calls.  Will trigger a remote_data event with channel id once it is available.
	</string>
	<string name="LSLTipText_llSendRemoteData">
key llSendRemoteData(key channel, string dest, integer idata, string sdata)
Send an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.
A message identifier key is returned.
An XML-RPC reply will trigger a remote_data event and reference the message id.
The message_id is returned.
	</string>
	<string name="LSLTipText_llRemoteDataReply">
llRemoteDataReply(key channel, key message_id, string sdata, integer idata)
Send an XML-RPC reply to message_id on channel with payload of string sdata and integer idata
	</string>
	<string name="LSLTipText_llCloseRemoteDataChannel">
llCloseRemoteDataChannel(key channel)
Closes XML-RPC channel.
	</string>
	<string name="LSLTipText_llMD5String">
string llMD5String(string src, integer nonce)
Performs a RSA Data Security, Inc. MD5 Message-Digest Algorithm on string with nonce.  Returns a 32 character hex string.
	</string>
	<string name="LSLTipText_llSetPrimitiveParams">
llSetPrimitiveParams(list rules)
Set primitive parameters based on rules.
	</string>
	<string name="LSLTipText_llStringToBase64">
string llStringToBase64(string str)
Converts a string to the Base 64 representation of the string.
	</string>
	<string name="LSLTipText_llBase64ToString">
string llBase64ToString(string str)
Converts a Base 64 string to a conventional string.  If the conversion creates any unprintable characters, they are converted to spaces.
	</string>
	<string name="LSLTipText_llXorBase64Strings">
string llXorBase64Strings(string s1, string s2)
DEPRECATED!  Please use llXorBase64StringsCorrect instead!!  Incorrectly performs an exclusive or on two Base 64 strings and returns a Base 64 string.  s2 repeats if it is shorter than s1.  Retained for backwards compatability.
	</string>
	<string name="LSLTipText_llRemoteDataSetRegion">
llRemoteDataSetRegion()
If an object using remote data channels changes regions, you must call this function to reregister the remote data channels.
You do not need to make this call if you don't change regions.
	</string>
	<string name="LSLTipText_llLog10">
float llLog10(float val)
Returns the base 10 log of val if val &gt; 0, otherwise returns 0.
	</string>
	<string name="LSLTipText_llLog">
float llLog(float val)
Returns the base e log of val if val &gt; 0, otherwise returns 0.
	</string>
	<string name="LSLTipText_llGetAnimationList">
list llGetAnimationList(key id)
Gets a list of all playing animations for avatar id
	</string>
	<string name="LSLTipText_llSetParcelMusicURL">
llSetParcelMusicURL(string url)
Sets the streaming audio URL for the parcel object is on
	</string>
	<string name="LSLTipText_llGetRootPosition">
vector llGetRootPosition()
Gets the global position of the root object of the object script is attached to
	</string>
	<string name="LSLTipText_llGetRootRotation">
rotation llGetRootRotation()
Gets the global rotation of the root object of the object script is attached to
	</string>
	<string name="LSLTipText_llGetObjectDesc">
string llGetObjectDesc()
Returns the description of the object the script is attached to
	</string>
	<string name="LSLTipText_llSetObjectDesc">
llSetObjectDesc(string name)
Sets the object's description
	</string>
	<string name="LSLTipText_llGetCreator">
key llGetCreator()
Returns the creator of the object
	</string>
	<string name="LSLTipText_llGetTimestamp">
string llGetTimestamp()
Gets the timestamp in the format: YYYY-MM-DDThh:mm:ss.ff..fZ
	</string>
	<string name="LSLTipText_llSetLinkAlpha">
llSetLinkAlpha(integer linknumber, float alpha, integer face)
If a prim exists in the link chain at linknumber, set face to alpha
	</string>
	<string name="LSLTipText_llGetNumberOfPrims">
integer llGetNumberOfPrims()
Returns the number of prims in a link set the script is attached to
	</string>
	<string name="LSLTipText_llGetNumberOfNotecardLines">
key llGetNumberOfNotecardLines(string name)
Returns number of lines in notecard 'name' via the dataserver event (cast return value to integer)
	</string>
	<string name="LSLTipText_llGetBoundingBox">
list llGetBoundingBox(key object)
Returns the bounding box around an object (including any linked prims) relative to the root prim, in a list:  [ (vector) min_corner, (vector) max_corner ]
	</string>
	<string name="LSLTipText_llGetGeometricCenter">
vector llGetGeometricCenter()
Returns the geometric center of the linked set the script is attached to.
	</string>
	<string name="LSLTipText_llGetPrimitiveParams">
list llGetPrimitiveParams(list params)
Gets primitive parameters specified in the params list.
	</string>
	<string name="LSLTipText_llIntegerToBase64">
string llIntegerToBase64(integer number)
Big endian encode of of integer as a Base64 string.
	</string>
	<string name="LSLTipText_llBase64ToInteger">
integer llBase64ToInteger(string str)
Big endian decode of a Base64 string into an integer.
	</string>
	<string name="LSLTipText_llGetGMTclock">
float llGetGMTclock()
Gets the time in seconds since midnight in GMT
	</string>
	<string name="LSLTipText_llGetSimulatorHostname">
string llGetSimulatorHostname()
Gets the hostname of the machine script is running on (same as string in viewer Help dialog)
	</string>
	<string name="LSLTipText_llSetLocalRot">
llSetLocalRot(rotation rot)
sets the rotation of a child prim relative to the root prim
	</string>
	<string name="LSLTipText_llParseStringKeepNulls">
list llParseStringKeepNulls(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers (separators and spacers must be lists of strings, maximum of 8 each), keeping any null values generated.
	</string>
	<string name="LSLTipText_llRezAtRoot">
llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiate owner's inventory object at pos with velocity vel and rotation rot with start parameter param.
The last selected root object's location will be set to pos
	</string>
	<string name="LSLTipText_llGetObjectPermMask">
integer llGetObjectPermMask(integer mask)
Returns the requested permission mask for the root object the task is attached to.
	</string>
	<string name="LSLTipText_llSetObjectPermMask">
llSetObjectPermMask(integer mask, integer value)
Sets the given permission mask to the new value on the root object the task is attached to.
	</string>
	<string name="LSLTipText_llGetInventoryPermMask">
integer llGetInventoryPermMask(string item, integer mask)
Returns the requested permission mask for the inventory item.
	</string>
	<string name="LSLTipText_llSetInventoryPermMask">
llSetInventoryPermMask(string item, integer mask, integer value)
Sets the given permission mask to the new value on the inventory item.
	</string>
	<string name="LSLTipText_llGetInventoryCreator">
key llGetInventoryCreator(string item)
Returns the key for the creator of the inventory item.
	</string>
	<string name="LSLTipText_llOwnerSay">
llOwnerSay(string msg)
says msg to owner only (if owner in sim)
	</string>
	<string name="LSLTipText_llRequestSimulatorData">
key llRequestSimulatorData(string simulator, integer data)
Requests data about simulator.  When data is available the dataserver event will be raised
	</string>
	<string name="LSLTipText_llForceMouselook">
llForceMouselook(integer mouselook)
If mouselook is TRUE any avatar that sits on this object is forced into mouselook mode
	</string>
	<string name="LSLTipText_llGetObjectMass">
float llGetObjectMass(key id)
Get the mass of the object with key id
	</string>
	<string name="LSLTipText_llListReplaceList">
list llListReplaceList(list dest, list src, integer start, integer end)
Replaces start through end of dest with src.
	</string>
	<string name="LSLTipText_llLoadURL">
llLoadURL(key avatar_id, string message, string url)
Shows dialog to avatar avatar_id offering to load web page at URL.  If user clicks yes, launches their web browser.
	</string>
	<string name="LSLTipText_llParcelMediaCommandList">
llParcelMediaCommandList(list command)
Sends a list of commands, some with arguments, to a parcel.
	</string>
	<string name="LSLTipText_llParcelMediaQuery">
list llParcelMediaQuery(list query)
Sends a list of queries, returns a list of results.
	</string>
	<string name="LSLTipText_llModPow">
integer llModPow(integer a, integer b, integer c)
Returns a raised to the b power, mod c. ( (a**b)%c ).  b is capped at 0xFFFF (16 bits).
	</string>
	<string name="LSLTipText_llGetInventoryType">
integer llGetInventoryType(string name)
Returns the type of the inventory name
	</string>
	<string name="LSLTipText_llSetPayPrice">
llSetPayPrice(integer price, list quick_pay_buttons)
Sets the default amount when someone chooses to pay this object.
	</string>
	<string name="LSLTipText_llGetCameraPos">
vector llGetCameraPos()
Gets current camera position for agent task has permissions for.
	</string>
	<string name="LSLTipText_llGetCameraRot">
rotation llGetCameraRot()
Gets current camera orientation for agent task has permissions for.
	</string>
	<string name="LSLTipText_llSetPrimURL">
llSetPrimURL(string url)
Updates the URL for the web page shown on the sides of the object.
	</string>
	<string name="LSLTipText_llRefreshPrimURL">
llRefreshPrimURL()
Reloads the web page shown on the sides of the object.
	</string>
	<string name="LSLTipText_llEscapeURL">
string llEscapeURL(string url)
Returns and escaped/encoded version of url, replacing spaces with %20 etc.
	</string>
	<string name="LSLTipText_llUnescapeURL">
string llUnescapeURL(string url)
Returns and unescaped/unencoded version of url, replacing %20 with spaces etc.
	</string>
	<string name="LSLTipText_llMapDestination">
llMapDestination(string simname, vector pos, vector look_at)
Opens world map centered on region with pos highlighted.
Only works for scripts attached to avatar, or during touch events.
(NOTE: look_at currently does nothing)
	</string>
	<string name="LSLTipText_llAddToLandBanList">
llAddToLandBanList(key avatar, float hours)
Add avatar to the land ban list for hours
	</string>
	<string name="LSLTipText_llRemoveFromLandPassList">
llRemoveFromLandPassList(key avatar)
Remove avatar from the land pass list
	</string>
	<string name="LSLTipText_llRemoveFromLandBanList">
llRemoveFromLandBanList(key avatar)
Remove avatar from the land ban list
	</string>
	<string name="LSLTipText_llSetCameraParams">
llSetCameraParams(list rules)
Sets multiple camera parameters at once.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
	</string>
	<string name="LSLTipText_llClearCameraParams">
llClearCameraParams()
Resets all camera parameters to default values and turns off scripted camera control.
	</string>
	<string name="LSLTipText_llListStatistics">
float llListStatistics(integer operation, list l)
Perform statistical aggregate functions on list l using LIST_STAT_* operations.
	</string>
	<string name="LSLTipText_llGetUnixTime">
integer llGetUnixTime()
Get the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock.
	</string>
	<string name="LSLTipText_llGetParcelFlags">
integer llGetParcelFlags(vector pos)
Get the parcel flags (PARCEL_FLAG_*) for the parcel including the point pos.
	</string>
	<string name="LSLTipText_llGetRegionFlags">
integer llGetRegionFlags()
Get the region flags (REGION_FLAG_*) for the region the object is in.
	</string>
	<string name="LSLTipText_llXorBase64StringsCorrect">
string llXorBase64StringsCorrect(string s1, string s2)
Correctly performs an exclusive or on two Base 64 strings and returns a Base 64 string.  s2 repeats if it is shorter than s1.
	</string>
	<string name="LSLTipText_llHTTPRequest">
llHTTPRequest(string url, list parameters, string body)
Send an HTTP request.
	</string>
	<string name="LSLTipText_llResetLandBanList">
llResetLandBanList()
Removes all residents from the land ban list.
	</string>
	<string name="LSLTipText_llResetLandPassList">
llResetLandPassList()
Removes all residents from the land access/pass list.
	</string>
	<string name="LSLTipText_llGetObjectPrimCount">
integer llGetObjectPrimCount(key object_id)
Returns the total number of prims for an object.
	</string>
	<string name="LSLTipText_llGetParcelPrimOwners">
list llGetParcelPrimOwners(vector pos)
Returns a list of all residents who own objects on the parcel and the number of objects they own.
Requires owner-like permissions for the parcel.
	</string>
	<string name="LSLTipText_llGetParcelPrimCount">
integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)
Gets the number of prims on the parcel of the given category.
Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.
	</string>
	<string name="LSLTipText_llGetParcelMaxPrims">
integer llGetParcelMaxPrims(vector pos, integer sim_wide)
Gets the maximum number of prims allowed on the parcel at pos.
	</string>
	<string name="LSLTipText_llGetParcelDetails">
list llGetParcelDetails(vector pos, list params)
Gets the parcel details specified in params for the parcel at pos.
Params is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA
	</string>
	<string name="LSLTipText_llSetLinkPrimitiveParams">
llSetLinkPrimitiveParams(integer linknumber, list rules)
Set primitive parameters for linknumber based on rules.
	</string>
	<string name="LSLTipText_llSetLinkTexture">
llSetLinkTexture(integer link_pos, string texture, integer face)
Sets the texture of face for link_pos
	</string>
	<string name="LSLTipText_llStringTrim">
string llStringTrim(string src, integer trim_type)
Trim leading and/or trailing spaces from a string.
Uses trim_type of STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.
	</string>
	<string name="LSLTipText_llRegionSay">
llRegionSay(integer channel, string msg)
broadcasts msg to entire region on channel (not 0.)
	</string>
	<string name="LSLTipText_llGetObjectDetails">
list llGetObjectDetails(key id, list params)
Gets the object details specified in params for the object with key id.
Details are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR.
	</string>
	<string name="LSLTipText_llSetClickAction">
llSetClickAction(integer action)
Sets the action performed when a prim is clicked upon.
	</string>
	<string name="LSLTipText_llGetRegionAgentCount">
int llGetRegionAgentCount()
returns the number of agents in a region
	</string>
	<string name="LSLTipText_llTextBox">
llTextBox(key avatar, string message, integer chat_channel
Shows a dialog box on the avatar's screen with the message.
A text box asks for input, and if entered the text is chatted on chat_channel.
	</string>
	<string name="LSLTipText_llGetAgentLanguage">
string llGetAgentLanguage(key id)
Gets the agents preferred language..
	</string>
	<string name="LSLTipText_llDetectedTouchUV">
vector llDetectedTouchUV(integer number)
returns the u and v coordinates in the first two components of a vector, for a triggered touch event
	</string>
	<string name="LSLTipText_llDetectedTouchFace">
integer llDetectedTouchFace(integer number)
returns the index of the face on the object for a triggered touch event
	</string>
	<string name="LSLTipText_llDetectedTouchPos">
vector llDetectedTouchPos(integer number)
returns the position touched for a triggered touch event
	</string>
	<string name="LSLTipText_llDetectedTouchNormal">
vector llDetectedTouchNormal(integer number)
returns the surface normal for a triggered touch event
	</string>
	<string name="LSLTipText_llDetectedTouchBinormal">
vector llDetectedTouchBinormal(integer number)
returns the surface binormal for a triggered touch event
	</string>
	<string name="LSLTipText_llDetectedTouchST">
vector llDetectedTouchST(integer number)
returns the s and t coordinates in the first two components of a vector, for a triggered touch event
	</string>
	<string name="LSLTipText_llSHA1String">
string llSHA1String(string sr)
Performs a SHA1 security Hash.  Returns a 40 character hex string.
	</string>
	<string name="LSLTipText_llGetFreeURLs">
integer llGetFreeURLs()
returns the available urls for the current script
	</string>
	<string name="LSLTipText_llRequestURL">
key llRequestURL()
Requests one HTTP:// url for use by this object
Triggers an http_server event with results.
	</string>
	<string name="LSLTipText_llRequestSecureURL">
key llRequestSecureURL()
Requests one HTTPS:// (SSL) url for use by this object
Triggers an http_server event with results.
	</string>
	<string name="LSLTipText_llReleaseURL">
llReleaseURL(string url)
Releases the specified URL, it will no longer be usable.
	</string>
	<string name="LSLTipText_llHTTPResponse">
llHTTPResponse(key id, integer status, string body)
Responds to request id with status and body.
	</string>
	<string name="LSLTipText_llGetHTTPHeader">
string llGetHTTPHeader(key id, string header)
Get the value for header for request id.
	</string>
	
	<!-- Avatar busy/away mode -->
	<string name="AvatarSetNotAway">Set Not Away</string>
	<string name="AvatarSetAway">Set Away</string>
	<string name="AvatarSetNotBusy">Set Not Busy</string>
	<string name="AvatarSetBusy">Set Busy</string>
	
	<!-- Wearable Types -->
	<string name="shape">Shape</string>
	<string name="skin">Skin</string>
	<string name="hair">Hair</string>
	<string name="eyes">Eyes</string>
	<string name="shirt">Shirt</string>
	<string name="pants">Pants</string>
	<string name="shoes">Shoes</string>
	<string name="socks">Socks</string>
	<string name="jacket">Jacket</string>
	<string name="gloves">Gloves</string>
	<string name="undershirt">Undershirt</string>
	<string name="underpants">Underpants</string>
	<string name="skirt">Skirt</string>
	<string name="alpha">Alpha</string>
	<string name="tattoo">Tattoo</string>
	<string name="invalid">invalid</string>
	
	<!-- notify -->
	<string name="next">Next</string>
	<string name="ok">OK</string>
	<string name="GroupNotifyGroupNotice">Group Notice</string>
	<string name="GroupNotifyGroupNotices">Group Notices</string>
	<string name="GroupNotifySentBy">Sent by</string>
	<string name="GroupNotifyAttached">Attached:</string>
	<string name="GroupNotifyViewPastNotices">View past notices or opt-out of receiving these messages here.</string>
	<string name="GroupNotifyOpenAttachment">Open Attachment</string>
	<string name="GroupNotifySaveAttachment">Save Attachment</string>
  <string name="TeleportOffer">Teleport offering</string>
  <!-- start-up toast's string-->
  <string name="StartUpNotification">%d new notification arrived while you were away...</string>
  <string name="StartUpNotifications">%d new notifications arrived while you were away...</string>
  <!-- overflow toast's string-->
  <string name="OverflowInfoChannelString">You have %d more notification</string>
  
  
	<!-- body parts -->
	<string name="BodyPartsRightArm">Right Arm</string>
	<string name="BodyPartsHead">Head</string>
	<string name="BodyPartsLeftArm">Left Arm</string>
	<string name="BodyPartsLeftLeg">Left Leg</string>
	<string name="BodyPartsTorso">Torso</string>
	<string name="BodyPartsRightLeg">Right Leg</string>

	<!-- slider -->
	<string name="GraphicsQualityLow">Low</string>
	<string name="GraphicsQualityMid">Mid</string>
	<string name="GraphicsQualityHigh">High</string>
	
	<!-- mouselook -->
	<string name="LeaveMouselook">Press ESC to return to World View</string>
	
	<!-- inventory -->
	<string name="InventoryNoMatchingItems">No matching items found in inventory.</string>
	<string name="InventoryNoTexture">
		You do not have a copy of
this texture in your inventory
	</string>
    <!-- use value="" because they have preceding spaces -->
	<string name="no_transfer" value=" (no transfer)" />
	<string name="no_modify"   value=" (no modify)" />
	<string name="no_copy"     value=" (no copy)" />
	<string name="worn"        value=" (worn)" />
	<string name="link"        value=" (link)" />
	<string name="broken_link" value=" (broken_link)" />
	<string name="LoadingContents">Loading contents...</string>
	<string name="NoContents">No contents</string>

	<!-- Gestures labels -->
    <!-- use value="" because they have preceding spaces -->
    <string name="Chat"          value=" Chat : " />
    <string name="Sound"         value=" Sound : " />
	<string name="Wait"          value=" --- Wait : " />
	<string name="AnimFlagStop"  value=" Stop Animation :    " />
	<string name="AnimFlagStart" value=" Start Animation :   " />
	<string name="Wave"          value=" Wave " />
	<string name="HelloAvatar"   value=" Hello, avatar! " />
	<string name="ViewAllGestures"  value="  View All >>" />
				
	<!-- inventory filter -->
    <!-- use value="" because they have preceding spaces -->
	<string name="Animations"    value=" Animations," />
	<string name="Calling Cards" value=" Calling Cards," />
	<string name="Clothing"      value=" Clothing," />
	<string name="Gestures"      value=" Gestures," />
	<string name="Landmarks"     value=" Landmarks," />
	<string name="Notecards"     value=" Notecards," />
	<string name="Objects"       value=" Objects," />
	<string name="Scripts"       value=" Scripts," />
	<string name="Sounds"        value=" Sounds," />
	<string name="Textures"      value=" Textures," />
	<string name="Snapshots"     value=" Snapshots," />
	<string name="No Filters"    value="No " />
	<string name="Since Logoff"  value=" - Since Logoff" />

	<!-- inventory folder -->
	<string name="InvFolder My Inventory">My Inventory</string>
	<string name="InvFolder My Favorites">My Favorites</string>
	<string name="InvFolder Library">Library</string>
	<string name="InvFolder Textures">Textures</string>
	<string name="InvFolder Sounds">Sounds</string>
	<string name="InvFolder Calling Cards">Calling Cards</string>
	<string name="InvFolder Landmarks">Landmarks</string>
	<string name="InvFolder Scripts">Scripts</string>
	<string name="InvFolder Clothing">Clothing</string>
	<string name="InvFolder Objects">Objects</string>
	<string name="InvFolder Notecards">Notecards</string>
	<string name="InvFolder New Folder">New Folder</string>
	<string name="InvFolder Inventory">Inventory</string>
	<string name="InvFolder Uncompressed Images">Uncompressed Images</string>
	<string name="InvFolder Body Parts">Body Parts</string>
	<string name="InvFolder Trash">Trash</string>
	<string name="InvFolder Photo Album">Photo Album</string>
	<string name="InvFolder Lost And Found">Lost And Found</string>
	<string name="InvFolder Uncompressed Sounds">Uncompressed Sounds</string>
	<string name="InvFolder Animations">Animations</string>
	<string name="InvFolder Gestures">Gestures</string>
	<string name="InvFolder favorite">Favorites</string>
	<string name="InvFolder Current Outfit">Current Outfit</string>
	<string name="InvFolder My Outfits">My Outfits</string>

  <!-- are used for Friends and Friends/All folders in Inventory "Calling cards" folder. See EXT-694-->
	<string name="InvFolder Friends">Friends</string>
	<string name="InvFolder All">All</string>

	<!-- inventory FVBridge -->
	<string name="Buy">Buy</string>
	<string name="BuyforL$">Buy for L$</string>
	
	<string name="Stone">Stone</string>
	<string name="Metal">Metal</string>
	<string name="Glass">Glass</string>
	<string name="Wood">Wood</string>
	<string name="Flesh">Flesh</string>
	<string name="Plastic">Plastic</string>
	<string name="Rubber">Rubber</string>	
	<string name="Light">Light</string>
	
	<!-- keyboard -->
	<string name="KBShift">Shift</string>
	<string name="KBCtrl">Ctrl</string>

	<!-- Avatar Skeleton --> 
	<string name="Chest">Chest</string>
	<string name="Skull">Skull</string>
	<string name="Left Shoulder">Left Shoulder</string>
	<string name="Right Shoulder">Right Shoulder</string>
	<string name="Left Hand">Left Hand</string>
	<string name="Right Hand">Right Hand</string>
	<string name="Left Foot">Left Foot</string>
	<string name="Right Foot">Right Foot</string>
	<string name="Spine">Spine</string>
	<string name="Pelvis">Pelvis</string>
	<string name="Mouth">Mouth</string>
	<string name="Chin">Chin</string>
	<string name="Left Ear">Left Ear</string>
	<string name="Right Ear">Right Ear</string>
	<string name="Left Eyeball">Left Eyeball</string>
	<string name="Right Eyeball">Right Eyeball</string>
	<string name="Nose">Nose</string>
	<string name="R Upper Arm">R Upper Arm</string>
	<string name="R Forearm">R Forearm</string>
	<string name="L Upper Arm">L Upper Arm</string>
	<string name="L Forearm">L Forearm</string>
	<string name="Right Hip">Right Hip</string>
	<string name="R Upper Leg">R Upper Leg</string>
	<string name="R Lower Leg">R Lower Leg</string>
	<string name="Left Hip">Left Hip</string>
	<string name="L Upper Leg">L Upper Leg</string>
	<string name="L Lower Leg">L Lower Leg</string>
	<string name="Stomach">Stomach</string>
	<string name="Left Pec">Left Pec</string>
	<string name="Right Pec">Right Pec</string>	

  <!-- Avatar age computation, see LLAvatarPropertiesProcessor::ageFromDate -->
  <string name="YearsMonthsOld">[AGEYEARS][AGEMONTHS]old</string>
  <string name="WeeksOld">[AGEWEEKS]old</string>
  <string name="DaysOld">[AGEDAYS]old</string>
  <string name="TodayOld">Joined today</string>
  
  <!-- Use value="" because of trailing spaces -->
  <string name="AgeYears"  value="[YEARS] years " />
  <string name="Age1Year"  value="1 year "/>
  <string name="AgeMonths" value="[MONTHS] months "/>
  <string name="Age1Month" value="1 month "/>
  <string name="AgeWeeks"  value="[WEEKS] weeks "/>
  <string name="Age1Week"  value="1 week "/>
  <string name="AgeDays"   value="[DAYS] days "/>
  <string name="Age1Day"   value="1 day "/>

  <!-- Account types, see LLAvatarPropertiesProcessor -->
  <string name="AcctTypeResident">Resident</string>
  <string name="AcctTypeTrial">Trial</string>
  <string name="AcctTypeCharterMember">Charter Member</string>
  <string name="AcctTypeEmployee">Linden Lab Employee</string>
  <string name="PaymentInfoUsed">Payment Info Used</string>
  <string name="PaymentInfoOnFile">Payment Info On File</string>
  <string name="NoPaymentInfoOnFile">No Payment Info On File</string>
  <string name="AgeVerified">Age-verified</string>
  <string name="NotAgeVerified">Not Age-verified</string>
  
  <!-- HUD Position --> 
	<string name="Center 2">Center 2</string>	
	<string name="Top Right">Top Right</string>	
	<string name="Top">Top</string>	
	<string name="Top Left">Top Left</string>	
	<string name="Center">Center</string>	
	<string name="Bottom Left">Bottom Left</string>	
	<string name="Bottom">Bottom</string>		
	<string name="Bottom Right">Bottom Right</string>							

	<!-- compile queue-->
	<string name="CompileQueueDownloadedCompiling">Downloaded, now compiling</string>
	<string name="CompileQueueScriptNotFound">Script not found on server.</string>
	<string name="CompileQueueProblemDownloading">Problem downloading</string>
	<string name="CompileQueueInsufficientPermDownload">Insufficient permissions to download a script.</string>
	<string name="CompileQueueInsufficientPermFor">Insufficient permissions for</string>
	<string name="CompileQueueUnknownFailure">Unknown failure to download</string>
	<string name="CompileQueueTitle">Recompilation Progress</string>
	<string name="CompileQueueStart">recompile</string>
	<string name="ResetQueueTitle">Reset Progress</string>
	<string name="ResetQueueStart">reset</string>
	<string name="RunQueueTitle">Set Running Progress</string>
	<string name="RunQueueStart">set running</string>
	<string name="NotRunQueueTitle">Set Not Running Progress</string>
	<string name="NotRunQueueStart">set not running</string>

	<!-- compile comment text-->
	<string name="CompileSuccessful">Compile successful!</string>
	<string name="CompileSuccessfulSaving">Compile successful, saving...</string>
	<string name="SaveComplete">Save complete.</string>
	<string name="ObjectOutOfRange">Script (object out of range)</string>    
	
	<!-- god tools -->
	<string name="GodToolsObjectOwnedBy">Object [OBJECT] owned by [OWNER]</string>
	
	<!-- groups -->
	<string name="GroupsNone">none</string>
	<string name="Group" value=" (group)" />
	<string name="Unknown">(Unknown)</string>
	<string name="SummaryForTheWeek"    value="Summary for this week, beginning on " />
	<string name="NextStipendDay"       value="The next stipend day is " />
	<string name="GroupIndividualShare" value="                      Group       Individual Share" />
	<string name="Balance">Balance</string>
	<string name="Credits">Credits</string>
	<string name="Debits">Debits</string>
	<string name="Total">Total</string>	
	<string name="NoGroupDataFound">No group data found for group </string>	
		
	<!-- floater IM -->
	<string name="IMParentEstate">parent estate</string>
	<string name="IMMainland">mainland</string>
	<string name="IMTeen">teen</string>
	
	<!-- floater region info -->
	<string name="RegionInfoError">error</string>
	<string name="RegionInfoAllEstatesOwnedBy">
		all estates
owned by [OWNER]
	</string>
	<string name="RegionInfoAllEstatesYouOwn">all estates you owned</string>
	<string name="RegionInfoAllEstatesYouManage">
		all estates that
you managed for [OWNER]
	</string>
	<string name="RegionInfoAllowedResidents">Allowed residents: ([ALLOWEDAGENTS], max [MAXACCESS])</string>
	<string name="RegionInfoAllowedGroups">Allowed groups: ([ALLOWEDGROUPS], max [MAXACCESS])</string>

	<!-- script editor -->
	<string name="CursorPos">Line [LINE], Column [COLUMN]</string>
	
	<!-- panel dir browser -->
	<string name="PanelDirCountFound">[COUNT] found</string>
	<string name="PanelDirTimeStr">[hour12,datetime,slt]:[min,datetime,slt] [ampm,datetime,slt]</string>

	<!-- panel dir events -->
	<string name="PanelDirEventsDateText">[mthnum,datetime,slt]/[day,datetime,slt]</string>
	
	<!-- panel contents -->
	<string name="PanelContentsNewScript">New Script</string>
	
	<!-- panel avatar -->
	<!-- <string name="None">None</string>	Duplicate-->
	
	<!-- Mute -->
	<string name="MuteByName">(by name)</string>
	<string name="MuteAgent">(resident)</string>
	<string name="MuteObject">(object)</string>
	<string name="MuteGroup">(group)</string>
	
	<!-- Region/Estate Covenant -->
	<string name="RegionNoCovenant">There is no Covenant provided for this Estate.</string>
	<string name="RegionNoCovenantOtherOwner">There is no Covenant provided for this Estate. The land on this estate is being sold by the Estate owner, not Linden Lab.  Please contact the Estate Owner for sales details.</string>
	<string name="covenant_last_modified">Last Modified:</string>
	<string name="none_text"  value=" (none) " />
	<string name="never_text" value=" (never) " />
	
	<!--Region Details-->
	<string name="GroupOwned">Group Owned</string>
	<string name="Public">Public</string>
	
	<!-- panel classified -->
	<string name="ClassifiedClicksTxt">Clicks: [TELEPORT] teleport, [MAP] map, [PROFILE] profile</string>
	<string name="ClassifiedUpdateAfterPublish">(will update after publish)</string>
	
	<!-- group voting dialog -->
	<string name="GroupVoteYes">Yes</string>
	<string name="GroupVoteNo">No</string>
	<string name="GroupVoteNoActiveProposals">There are currently no active proposals</string>
	<string name="GroupVoteNoArchivedProposals">There are currently no archived proposals</string>
	<string name="GroupVoteRetrievingArchivedProposals">Retrieving archived proposals</string>
	<string name="GroupVoteRetrievingActiveProposals">Retrieving active proposals</string>

	<!-- Multi Preview Floater -->
	<string name="MultiPreviewTitle">Preview</string>
	<string name="MultiPropertiesTitle">Properties</string>

	<!-- inventory offer -->
	<string name="InvOfferAnObjectNamed">An object named</string>
	<string name="InvOfferOwnedByGroup">owned by the group</string>
	<string name="InvOfferOwnedByUnknownGroup">owned by an unknown group</string>
	<string name="InvOfferOwnedBy">owned by</string>
	<string name="InvOfferOwnedByUnknownUser">owned by an unknown user</string>
	<string name="InvOfferGaveYou">gave you</string>
	<string name="InvOfferYouDecline">You decline</string>
	<string name="InvOfferFrom">from</string>
	
	<!-- group money -->
	<string name="GroupMoneyTotal">Total</string>
	<string name="GroupMoneyBought">bought</string>
	<string name="GroupMoneyPaidYou">paid you</string>
	<string name="GroupMoneyPaidInto">paid into</string>
	<string name="GroupMoneyBoughtPassTo">bought pass to</string>
	<string name="GroupMoneyPaidFeeForEvent">paid fee for event</string>
	<string name="GroupMoneyPaidPrizeForEvent">paid prize for event</string>
	<string name="GroupMoneyBalance">Balance</string>
	<string name="GroupMoneyCredits">Credits</string>
	<string name="GroupMoneyDebits">Debits</string>
	
	<!-- viewer object -->
	<string name="ViewerObjectContents">Contents</string>
	
	<!-- Viewer menu -->
	<string name="AcquiredItems">Acquired Items</string>
	<string name="Cancel">Cancel</string>	
	<string name="UploadingCosts">Uploading %s costs</string>	
	<string name="UnknownFileExtension">
		Unknown file extension .%s
Expected .wav, .tga, .bmp, .jpg, .jpeg, or .bvh
	</string>		
	<string name="AddLandmarkNavBarMenu">Add Landmark...</string>	 
	<string name="EditLandmarkNavBarMenu">Edit Landmark...</string>
	
	<!-- Previews -->
	<string name="FileSaved">File Saved</string>	
	<string name="Receiving">Receiving</string>	
		
	<!-- status bar , Time -->
	<string name="AM">AM</string>	
	<string name="PM">PM</string>	
	<string name="PST">PST</string>	
	<string name="PDT">PDT</string>			

	<!-- Directions, HUD -->
	<string name="Forward">Forward</string>	
	<string name="Left">Left</string>	
	<string name="Right">Right</string>	
	<string name="Back">Back</string>			
	<string name="North">North</string>	
	<string name="South">South</string>	
	<string name="West">West</string>	
	<string name="East">East</string>		
	<string name="Up">Up</string>	
	<string name="Down">Down</string>	

    <!-- Search Category Strings -->
	<string name="Any Category">Any Category</string>	
	<string name="Shopping">Shopping</string>	
	<string name="Land Rental">Land Rental</string>	
	<string name="Property Rental">Property Rental</string>	
	<string name="Special Attraction">Special Attraction</string>	
	<string name="New Products">New Products</string>	
	<string name="Employment">Employment</string>	
	<string name="Wanted">Wanted</string>	
	<string name="Service">Service</string>	
	<string name="Personal">Personal</string>	

	<!-- PARCEL_CATEGORY_UI_STRING -->
	<string name="None">None</string>	
	<string name="Linden Location">Linden Location</string>	
	<string name="Adult">Adult</string>	
	<string name="Arts&amp;Culture">Arts &amp; Culture</string>			
	<string name="Business">Business</string>	
	<string name="Educational">Educational</string>	
	<string name="Gaming">Gaming</string>	
	<string name="Hangout">Hangout</string>		
	<string name="Newcomer Friendly">Newcomer Friendly</string>	
	<string name="Parks&amp;Nature">Parks &amp; Nature</string>
	<string name="Residential">Residential</string>	
	<!--<string name="Shopping">Shopping</string>	-->
	<string name="Stage">Stage</string>	
	<string name="Other">Other</string>	
	<string name="Any">Any</string>	
	<string name="You">You</string>							
						
	<!-- punctuations -->
	<string name=":">:</string>			
	<string name=",">,</string>					
	<string name="...">...</string>					
	<string name="***">***</string>					
	<string name="(">(</string>					
	<string name=")">)</string>
	<string name=".">.</string>		
	<string name="'">'</string>	
	<string name="---">---</string>										

	<!-- OSMessageBox messages -->
	<string name="MBCmdLineError">
		An error was found parsing the command line.
Please see: http://wiki.secondlife.com/wiki/Client_parameters
Error:
	</string>
	<string name="MBCmdLineUsg">[APP_NAME] Command line usage:</string>
	<string name="MBUnableToAccessFile">
		[APP_NAME] is unable to access a file that it needs.

This can be because you somehow have multiple copies running, or your system incorrectly thinks a file is open.
If this message persists, restart your computer and try again.
If it continues to persist, you may need to completely uninstall [APP_NAME] and reinstall it.
	</string>
	<string name="MBFatalError">Fatal Error</string>
	<string name="MBRequiresAltiVec"> [APP_NAME] requires a processor with AltiVec (G4 or later).</string>
	<string name="MBAlreadyRunning">
		[APP_NAME] is already running.
Check your task bar for a minimized copy of the program.
If this message persists, restart your computer.
	</string>
	<string name="MBFrozenCrashed">
		[APP_NAME] appears to have frozen or crashed on the previous run.
Would you like to send a crash report?
	</string>
	<string name="MBAlert">Alert</string>
	<string name="MBNoDirectX">
		[APP_NAME] is unable to detect DirectX 9.0b or greater.
[APP_NAME] uses DirectX to detect hardware and/or outdated drivers that can cause stability problems, poor performance and crashes.  While you can run [APP_NAME] without it, we highly recommend running with DirectX 9.0b.

Do you wish to continue?
	</string>
	<string name="MBWarning">Warning</string>
	<string name="MBNoAutoUpdate">
		Automatic updating is not yet implemented for Linux.
Please download the latest version from www.secondlife.com.
	</string>
	<string name="MBRegClassFailed">RegisterClass failed</string>
	<string name="MBError">Error</string>
	<string name="MBFullScreenErr">
		Unable to run fullscreen at [WIDTH] x [HEIGHT].
Running in window.
	</string>
	<string name="MBDestroyWinFailed">Shutdown Error while destroying window (DestroyWindow() failed)</string>
	<string name="MBShutdownErr">Shutdown Error</string>
	<string name="MBDevContextErr">Can't make GL device context</string>
	<string name="MBPixelFmtErr">Can't find suitable pixel format</string>
	<string name="MBPixelFmtDescErr">Can't get pixel format description</string>
	<string name="MBTrueColorWindow">
		[APP_NAME] requires True Color (32-bit) to run in a window.
Please go to Control Panels &gt; Display &gt; Settings and set the screen to 32-bit color.
Alternately, if you choose to run fullscreen, [APP_NAME] will automatically adjust the screen each time it runs.
	</string>
	<string name="MBAlpha">
		[APP_NAME] is unable to run because it can't get an 8 bit alpha channel.  Usually this is due to video card driver issues.
Please make sure you have the latest video card drivers installed.
Also be sure your monitor is set to True Color (32-bit) in Control Panels &gt; Display &gt; Settings.
If you continue to receive this message, contact the [SUPPORT_SITE].
	</string>
	<string name="MBPixelFmtSetErr">Can't set pixel format</string>
	<string name="MBGLContextErr">Can't create GL rendering context</string>
	<string name="MBGLContextActErr">Can't activate GL rendering context</string>
	<string name="MBVideoDrvErr">
		[APP_NAME] is unable to run because your video card drivers did not install properly, are out of date, or are for unsupported hardware. Please make sure you have the latest video card drivers and even if you do have the latest, try reinstalling them.

If you continue to receive this message, contact the [SUPPORT_SITE].
	</string>

	<!-- Avatar Shape Information -->
    <string name="Attached Earlobes">Attached Earlobes</string>
	<string name="Arm Length">Arm Length</string>	
    <string name="Back Bangs Down">Back Bangs Down</string>
    <string name="Back Bangs Up">Back Bangs Up</string>
    <string name="Back Hair Down">Back Hair Down</string>
    <string name="Back Hair Up">Back Hair Up</string>
    <string name="Belly Size">Belly Size</string>	
	<string name="Blonde Hair">Blonde Hair</string>
    <string name="Big Eyeball">Big Eyeball</string>
    <string name="Big Hair Back">Big Hair Back</string>
    <string name="Big Hair Front">Big Hair Front</string>
    <string name="Big Hair Top">Big Hair Top</string>
	<string name="Body Fat">Body Fat</string>
    <string name="Body Thickness">Body Thickness</string>
    <string name="Breast Buoyancy">Breast Buoyancy</string>
    <string name="Breast Cleavage">Breast Cleavage</string>
	<string name="Breast Size">Breast Size</string>
    <string name="Bridge Width">Bridge Width</string>
    <string name="Brow Size">Brow Size</string>
    <string name="Butt Size">Butt Size</string>
    <string name="Cheek Bones">Cheek Bones</string>
    <string name="Chest Size">Chest Size</string>
    <string name="Chin Angle">Chin Angle</string>
    <string name="Chin Cleft">Chin Cleft</string>
    <string name="Chin Depth">Chin Depth</string>
    <string name="Chin-Neck">Chin-Neck</string>
	<string name="Collar Back">Collar Back</string>
	<string name="Collar Front">Collar Front</string>
    <string name="Crooked Nose">Crooked Nose</string>
    <string name="Cuff Flare">Cuff Flare</string>
    <string name="Ear Angle">Ear Angle</string>
    <string name="Ear Size">Ear Size</string>
    <string name="Ear Tips">Ear Tips</string>
    <string name="Egg Head">Egg Head</string>
    <string name="Eye Bags">Eye Bags</string>
	<string name="Eye Color">Eye Color</string>
    <string name="Eye Depth">Eye Depth</string>
	<string name="Eye Lightness">Eye Lightness</string>
    <string name="Eye Opening">Eye Opening</string>
    <string name="Eye Pop">Eye Pop</string>
    <string name="Eye Size">Eye Size</string>
    <string name="Eye Spacing">Eye Spacing</string>
    <string name="Eyeball Size">Eyeball Size</string>
    <string name="Eyebrow Arc">Eyebrow Arc</string>
    <string name="Eyebrow Height">Eyebrow Height</string>
    <string name="Eyebrow Points">Eyebrow Points</string>
    <string name="Eyelash Length">Eyelash Length</string>
	<string name="Eyeliner">Eyeliner</string>
	<string name="Eyeliner Color">Eyeliner Color</string>
	<string name="Face Shear">Face Shear</string>
	<string name="Facial Definitionr">Facial Definition</string>
    <string name="Fat Head">Fat Head</string>
    <string name="Fat Lower Lip">Fat Lower Lip</string>
    <string name="Fat Torso">Fat Torso</string>
    <string name="Fat Upper Lip">Fat Upper Lip</string>
    <string name="Foot Size">Foot Size</string>
	<string name="Freckles">Freckles</string>
    <string name="Front Bangs Down">Front Bangs Down</string>
    <string name="Front Bangs Up">Front Bangs Up</string>
    <string name="Front Hair Down">Front Hair Down</string>
    <string name="Front Hair Up">Front Hair Up</string>
	<string name="Forehead Angle">Forehead Angle</string>
    <string name="Full Hair Sides">Full Hair Sides</string>
	<string name="Glove Fingers">Glove Fingers</string> 
	<string name="Glove Length">Glove Length</string>
    <string name="Hair Thickess">Hair Thickess</string>
    <string name="Hair Tilted Left">Hair Tilted Left</string>
    <string name="Hair Tilted Right">Hair Tilted Right</string>
    <string name="Hair Volume">Hair Volume</string>
	<string name="Hand Size">Hand Size</string>
	<string name="Head Length">Head Length</string>
    <string name="Head Shape">Head Shape</string>
    <string name="Head Size">Head Size</string>
    <string name="Head Stretch">Head Stretch</string>
    <string name="Heel Height">Heel Height</string>
    <string name="Heel Shape">Heel Shape</string>
    <string name="Height">Height</string>
    <string name="Hip Width">Hip Width</string>
	<string name="Hip Length">Hip Length</string>
    <string name="Inner Eye Corner">Inner Eye Corner</string>
    <string name="Jacket Length">Jacket Length</string>
    <string name="Jacket Wrinkles">Jacket Wrinkles</string>
    <string name="Jowls">Jowls</string>	
    <string name="Jaw Angle">Jaw Angle</string>
    <string name="Jaw Jut">Jaw Jut</string>
    <string name="Jaw Shape">Jaw Shape</string>
    <string name="Knee Angle">Knee Angle</string>
    <string name="Left Part">Left Part</string>
    <string name="Leg Muscles">Leg Muscles</string>
	<string name="Leg Length">Leg Length</string>
    <string name="Lip Cleft">Lip Cleft</string>
    <string name="Lip Cleft Depth">Lip Cleft Depth</string>
    <string name="Lip Fullness">Lip Fullness</string>
	<string name="Lip Pinkness">Lip Pinkness</string>
    <string name="Lip Ratio">Lip Ratio</string>
    <string name="Lip Thickness">Lip Thickness</string>	
    <string name="Lip Width">Lip Width</string>
    <string name="Longcuffs">Longcuffs</string>
    <string name="Love Handles">Love Handles</string>
    <string name="Lower Bridge">Lower Bridge</string>
    <string name="Lower Cheeks">Lower Cheeks</string>
    <string name="Middle Part">Middle Part</string>
    <string name="Mouth Corner">Mouth Corner</string>
    <string name="Mouth Position">Mouth Position</string>
	<string name="Nail Polish">Nail Polish</string>
	<string name="Nail Polish Color">Nail Polish Color</string>
	<string name="Neck Length">Neck Length</string>
	<string name="Neck Thickness">Neck Thickness</string>
    <string name="Nose Size">Nose Size</string>
    <string name="Nose Thickness">Nose Thickness</string>
    <string name="Nose Tip Angle">Nose Tip Angle</string>
    <string name="Nose Tip Shape">Nose Tip Shape</string>
    <string name="Nose Width">Nose Width</string>
    <string name="Nostril Division">Nostril Division</string>
    <string name="Nostril Width">Nostril Width</string>
    <string name="Open Front">Open Front</string>
    <string name="Outer Eye Corner">Outer Eye Corner</string>
	<string name="Outer Shadow">Outer Shadow</string>
	<string name="Out Shdw Opacity">Out Shdw Opacity</string>
	<string name="Out Shdw Color">Out Shdw Color</string>	
    <string name="Package">Package</string>
    <string name="Pants Crotch">Pants Crotch</string> 
	<string name="Pants Fit">Pants Fit</string>
	<string name="Pants Length">Pants Length</string>
	<string name="Pants Waist">Pants Waist</string>
	<string name="Pants Wrinkles">Pants Wrinkles</string>
    <string name="Part Bangs">Part Bangs</string>
    <string name="Pectorals">Pectorals</string>
    <string name="Platform Height">Platform Height</string>
    <string name="Platform Width">Platform Width</string>
	<string name="Pigment">Pigment</string>
    <string name="Puffy Eyelids">Puffy Eyelids</string>
	<string name="Rainbow Color">Rainbow Color</string>
	<string name="Red Hair">Red Hair</string>
    <string name="Right Part">Right Part</string>
    <string name="Round Forehead">Round Forehead</string>
	<string name="Rosy Complexion">Rosy Complexion</string>
    <string name="Ruddiness">Ruddiness</string>
    <string name="Rumpled Hair">Rumpled Hair</string>
    <string name="Saddle Bags">Saddle Bags</string>
    <string name="Scrawny Leg">Scrawny Leg</string>
    <string name="Shear Back">Shear Back</string>
    <string name="Shear Face">Shear Face</string>
    <string name="Shear Front">Shear Front</string>
    <string name="Shift Mouth">Shift Mouth</string>
	<string name="Shirt Bottom">Shirt Bottom</string>
    <string name="Shirt Fit">Shirt Fit</string>
	<string name="Shirt Wrinkles">Shirt Wrinkles</string>
	<string name="Shoe Height">Shoe Height</string>
    <string name="Shoulders">Shoulders</string>
    <string name="Side Bangs Down">Side Bangs Down</string>
    <string name="Side Bangs Up">Side Bangs Up</string>
    <string name="Sides Hair Down">Sides Hair Down</string>
    <string name="Sides Hair Up">Sides Hair Up</string>
    <string name="Skirt Fit">Skirt Fit</string>
	<string name="Skirt Length">Skirt Length</string>
    <string name="Slanted Forehead">Slanted Forehead</string> 
	<string name="Sleeve Length">Sleeve Length</string>
    <string name="Sleeve Looseness">Sleeve Looseness</string> 
	<string name="Slit Back">Slit Back</string> 
	<string name="Slit Front">Slit Front</string> 
	<string name="Slit Left">Slit Left</string> 
	<string name="Slit Right">Slit Right</string> 
	<string name="Socks Length">Socks Length</string>
    <string name="Spiked Hair">Spiked Hair</string>
    <string name="Squash/Stretch Head">Squash/Stretch Head</string>
    <string name="Swept Back Hair">Swept Back Hair</string>
    <string name="Swept Forward Hair">Swept Forward Hair</string>
    <string name="Taper Back">Taper Back</string>
    <string name="Taper Front">Taper Front</string>
    <string name="Toe Shape">Toe Shape</string>
    <string name="Toe Thickness">Toe Thickness</string>
	<string name="Toe Length">Toe Length</string>
	<string name="Torso Length">Torso Length</string>
    <string name="Torso Muscles">Torso Muscles</string>
    <string name="Torso Scrawny">Torso Scrawny</string>
    <string name="Upper Bridge">Upper Bridge</string>
    <string name="Upper Cheeks">Upper Cheeks</string>
    <string name="Upper Chin Cleft">Upper Chin Cleft</string>
    <string name="Upper Eyelid Fold">Upper Eyelid Fold</string>
	<string name="Waist Height">Waist Height</string>
	<string name="White Hair">White Hair</string>
    <string name="big belly skirt">big belly skirt</string>
    <string name="bigbutt skirt">bigbutt skirt</string>
    <string name="bustle skirt">bustle skirt</string>
    <string name="legs skirt">legs skirt</string>
    <string name="loose skirt">loose skirt</string>
    <string name="poofy skirt">poofy skirt</string>
    <string name="tight skirt">tight skirt</string>	
	<string name="wrinkles">wrinkles</string>	
	
    <!-- Favorites Bar -->
    <string name="location_ctrl_add_landmark">Add to My Landmarks</string>
    <string name="location_ctrl_edit_landmark">Edit My Landmark</string>
    <string name="favorite_landmark_loading_tooltip">(Loading...)</string>
	
	<!-- Strings used by the (currently Linux) auto-updater app -->
	<string name="UpdaterWindowTitle">
	  [APP_NAME] Update
	</string>
	<string name="UpdaterNowUpdating">
	  Now updating [APP_NAME]...
	</string>
	<string name="UpdaterNowInstalling">
	  Installing [APP_NAME]...
	</string>
	<string name="UpdaterUpdatingDescriptive">
	  Your [APP_NAME] Viewer is being updated to the latest release.  This may take some time, so please be patient.
	</string>
	<string name="UpdaterProgressBarTextWithEllipses">
	  Downloading update...
	</string>
	<string name="UpdaterProgressBarText">
	  Downloading update
	</string>
	<string name="UpdaterFailDownloadTitle">
	  Failed to download update
	</string>
	<string name="UpdaterFailUpdateDescriptive">
	  An error occurred while updating [APP_NAME]. Please download the latest version from www.secondlife.com.
	</string>
	<string name="UpdaterFailInstallTitle">
	  Failed to install update
	</string>
	<string name="UpdaterFailStartTitle">
	  Failed to start viewer
	</string>

  <!-- IM system messages -->
  <string name="only_user_message">
    You are the only user in this session.
  </string>
  <string name="offline_message">
    [FIRST] [LAST] is offline.
  </string>
  <string name="invite_message">
    Click the [BUTTON NAME] button to accept/connect to this voice chat.
  </string>
  <string name="muted_message">
    You have blocked this resident. Sending a message will automatically unblock them.
  </string>
  <string name="generic_request_error">
    Error making request, please try again later.
  </string>
  <string name="insufficient_perms_error">
    You do not have sufficient permissions.
  </string>
  <string name="session_does_not_exist_error">
    The session no longer exists
  </string>
  <string name="no_ability_error">
    You do not have that ability.
  </string>
  <string name="not_a_mod_error">
    You are not a session moderator.
  </string>
  <string name="muted_error">
    A group moderator disabled your text chat.
  </string>
  <string name="add_session_event">
    Unable to add users to chat session with [RECIPIENT].
  </string>
  <string name="message_session_event">
    Unable to send your message to the chat session with [RECIPIENT].
  </string>
  <string name="removed_from_group">
    You have been removed from the group.
  </string>
  <string name="close_on_no_ability">
    You no longer have the ability to be in the chat session.
  </string>
</strings>
